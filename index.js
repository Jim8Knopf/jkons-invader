!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}([function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return _})),n.d(t,"b",(function(){return E})),n.d(t,"c",(function(){return F})),n.d(t,"d",(function(){return a})),n.d(t,"e",(function(){return u})),n.d(t,"f",(function(){return l})),n.d(t,"g",(function(){return h})),n.d(t,"h",(function(){return N})),n.d(t,"i",(function(){return y})),n.d(t,"j",(function(){return M})),n.d(t,"k",(function(){return p})),n.d(t,"l",(function(){return f})),n.d(t,"m",(function(){return B})),n.d(t,"n",(function(){return Q})),n.d(t,"o",(function(){return j})),n.d(t,"p",(function(){return b})),n.d(t,"q",(function(){return D})),n.d(t,"r",(function(){return m})),n.d(t,"s",(function(){return g})),n.d(t,"t",(function(){return C})),n.d(t,"u",(function(){return w})),n.d(t,"v",(function(){return P})),n.d(t,"w",(function(){return I})),n.d(t,"x",(function(){return A})),n.d(t,"y",(function(){return L})),n.d(t,"z",(function(){return R})),n.d(t,"A",(function(){return Y})),n.d(t,"B",(function(){return V})),n.d(t,"C",(function(){return k})),n.d(t,"D",(function(){return U})),n.d(t,"E",(function(){return z})),n.d(t,"F",(function(){return H}));var r=n(5),i=!1,o=!1,s="${JSCORE_VERSION}",a=function(e,t){if(!e)throw u(t)},u=function(e){return new Error("Firebase Database ("+s+") INTERNAL ASSERT FAILED: "+e)},c=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},l={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<e.length;i+=3){var o=e[i],s=i+1<e.length,a=s?e[i+1]:0,u=i+2<e.length,c=u?e[i+2]:0,l=o>>2,h=(3&o)<<4|a>>4,d=(15&a)<<2|c>>6,p=63&c;u||(p=64,s||(d=64)),r.push(n[l],n[h],n[d],n[p])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(c(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var s=((7&i)<<18|(63&(o=e[n++]))<<12|(63&(a=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(s>>10)),t[r++]=String.fromCharCode(56320+(1023&s))}else{o=e[n++];var a=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&a)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<e.length;){var o=n[e.charAt(i++)],s=i<e.length?n[e.charAt(i)]:0,a=++i<e.length?n[e.charAt(i)]:64,u=++i<e.length?n[e.charAt(i)]:64;if(++i,null==o||null==s||null==a||null==u)throw Error();var c=o<<2|s>>4;if(r.push(c),64!==a){var l=s<<4&240|a>>2;if(r.push(l),64!==u){var h=a<<6&192|u;r.push(h)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},h=function(e){var t=c(e);return l.encodeByteArray(t,!0)},d=function(e){try{return l.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function p(e){return f(void 0,e)}function f(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&"__proto__"!==n&&(e[n]=f(e[n],t[n]));return e}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var _=function(){function e(){var e=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch((function(){})),1===e.length?e(n):e(n,r))}},e}();
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function y(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');var n=t||"demo-project",i=e.iat||0,o=e.sub||e.user_id;if(!o)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");var s=Object(r.a)({iss:"https://securetoken.google.com/"+n,aud:n,iat:i,exp:i+3600,auth_time:i,sub:o,user_id:o,firebase:{sign_in_provider:"custom",identities:{}}},e);return[l.encodeString(JSON.stringify({alg:"none",type:"JWT"}),!1),l.encodeString(JSON.stringify(s),!1),""].join(".")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function v(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function m(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(v())}function g(){try{return"[object process]"===Object.prototype.toString.call(e.process)}catch(e){return!1}}function b(){return"object"==typeof self&&self.self===self}function w(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function C(){return!0===i||!0===o}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var O=function(e){function t(n,r,i){var o=e.call(this,r)||this;return o.code=n,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,t.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,E.prototype.create),o}return Object(r.b)(t,e),t}(Error),E=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n}return e.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=t[0]||{},i=this.service+"/"+e,o=this.errors[e],s=o?T(o,r):"Error",a=this.serviceName+": "+s+" ("+i+").",u=new O(i,a,r);return u},e}();function T(e,t){return e.replace(S,(function(e,n){var r=t[n];return null!=r?String(r):"<"+n+"?>"}))}var S=/\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function I(e){return JSON.parse(e)}function k(e){return JSON.stringify(e)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var x=function(e){var t={},n={},r={},i="";try{var o=e.split(".");t=I(d(o[0])||""),n=I(d(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:i}},P=function(e){var t=x(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},j=function(e){var t=x(e).claims;return"object"==typeof t&&!0===t.admin};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function N(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function R(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function D(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function A(e,t,n){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function L(e){for(var t=[],n=function(e,n){Array.isArray(n)?n.forEach((function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))})):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))},r=0,i=Object.entries(e);r<i.length;r++){var o=i[r];n(o[0],o[1])}return t.length?"&"+t.join("&"):""}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var F=function(){function e(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}return e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,s,a=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=l^u&(c^l),s=1518500249):(o=u^c^l,s=1859775393):r<60?(o=u&c|l&(u|c),s=2400959708):(o=u^c^l,s=3395469782);i=(a<<5|a>>>27)+o+h+s+n[r]&4294967295;h=l,l=c,c=4294967295&(u<<30|u>>>2),u=a,a=i}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},e.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<t;){if(0===o)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[o]=e.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<t;)if(i[o]=e[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}},e.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)e[r]=this.chain_[n]>>i&255,++r;return e},e}();function M(e,t){var n=new q(e,t);return n.subscribe.bind(n)}var q=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((function(){e(n)})).catch((function(e){n.error(e)}))}return e.prototype.next=function(e){this.forEachObserver((function(t){t.next(e)}))},e.prototype.error=function(e){this.forEachObserver((function(t){t.error(e)})),this.close(e)},e.prototype.complete=function(){this.forEachObserver((function(e){e.complete()})),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=t;n<r.length;n++){var i=r[n];if(i in e&&"function"==typeof e[i])return!0}return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:n}).next&&(r.next=W),void 0===r.error&&(r.error=W),void 0===r.complete&&(r.complete=W);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}})),this.observers.push(r),o},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((function(){t.observers=void 0,t.onNoObservers=void 0})))},e}();function W(){}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var U=function(e,t,n,r){var i;if(r<t?i="at least "+t:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")};function B(e,t){return e+" failed: "+t+" argument "}function z(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(B(e,t)+"must be a valid function.")}function H(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(B(e,t)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var V=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(i>=55296&&i<=56319){var o=i-55296;r++,a(r<e.length,"Surrogate pair missing trail surrogate."),i=65536+(o<<10)+(e.charCodeAt(r)-56320)}i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):i<65536?(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},Y=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t};
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Q(e){return e&&e._delegate?e._delegate:e}}).call(this,n(6))},function(e,t,n){"use strict";n.d(t,"c",(function(){return i})),n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return s})),n.d(t,"d",(function(){return a})),n.d(t,"g",(function(){return u})),n.d(t,"e",(function(){return c})),n.d(t,"f",(function(){return l}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function s(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function a(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}Object.create;function u(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function l(e,t){for(var n=0,r=t.length,i=e.length;n<r;n++,i++)e[i]=t[n];return e}Object.create},function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return d})),n.d(t,"c",(function(){return h}));var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function i(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function o(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}Object.create;function s(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function u(e,t){for(var n=0,r=t.length,i=e.length;n<r;n++,i++)e[i]=t[n];return e}Object.create;var c=n(0),l=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e.prototype.setInstanceCreatedCallback=function(e){return this.onInstanceCreated=e,this},e}(),h=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.onInitCallbacks=new Set}return e.prototype.get=function(e){void 0===e&&(e="[DEFAULT]");var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new c.a;if(this.instancesDeferred.set(t,n),this.isInitialized(t)||this.shouldAutoInitialize())try{var r=this.getOrInitializeService({instanceIdentifier:t});r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t=r({identifier:"[DEFAULT]",optional:!1},e),n=t.identifier,i=t.optional,o=this.normalizeInstanceIdentifier(n);if(!this.isInitialized(o)&&!this.shouldAutoInitialize()){if(i)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:o})}catch(e){if(i)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e))try{this.getOrInitializeService({instanceIdentifier:"[DEFAULT]"})}catch(e){}try{for(var r=s(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=a(i.value,2),u=o[0],c=o[1],l=this.normalizeInstanceIdentifier(u);try{var h=this.getOrInitializeService({instanceIdentifier:l});c.resolve(h)}catch(e){}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}}},e.prototype.clearInstance=function(e){void 0===e&&(e="[DEFAULT]"),this.instancesDeferred.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return i(this,void 0,void 0,(function(){var e;return o(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(u(u([],a(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()})))),a(e.filter((function(e){return"_delete"in e})).map((function(e){return e._delete()})))))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.isInitialized=function(e){return void 0===e&&(e="[DEFAULT]"),this.instances.has(e)},e.prototype.initialize=function(e){var t,n;void 0===e&&(e={});var r=e.instanceIdentifier,i=void 0===r?"[DEFAULT]":r,o=e.options,u=void 0===o?{}:o,c=this.normalizeInstanceIdentifier(i);if(this.isInitialized(c))throw Error(this.name+"("+c+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var l=this.getOrInitializeService({instanceIdentifier:c,options:u});try{for(var h=s(this.instancesDeferred.entries()),d=h.next();!d.done;d=h.next()){var p=a(d.value,2),f=p[0],_=p[1];c===this.normalizeInstanceIdentifier(f)&&_.resolve(l)}}catch(e){t={error:e}}finally{try{d&&!d.done&&(n=h.return)&&n.call(h)}finally{if(t)throw t.error}}return this.invokeOnInitCallbacks(l,c),l},e.prototype.onInit=function(e){var t=this;return this.onInitCallbacks.add(e),function(){t.onInitCallbacks.delete(e)}},e.prototype.invokeOnInitCallbacks=function(e,t){var n,r;try{for(var i=s(this.onInitCallbacks),o=i.next();!o.done;o=i.next()){var a=o.value;try{a(e,t)}catch(e){}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},e.prototype.getOrInitializeService=function(e){var t,n=e.instanceIdentifier,r=e.options,i=void 0===r?{}:r,o=this.instances.get(n);if(!o&&this.component&&(o=this.component.instanceFactory(this.container,{instanceIdentifier:(t=n,"[DEFAULT]"===t?void 0:t),options:i}),this.instances.set(n,o),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,o)}catch(e){}return o||null},e.prototype.normalizeInstanceIdentifier=function(e){return this.component?this.component.multipleInstances?e:"[DEFAULT]":e},e.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},e}();var d=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new h(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}()},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function r(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var i;n.d(t,"a",(function(){return o})),n.d(t,"b",(function(){return h})),n.d(t,"c",(function(){return d})),n.d(t,"d",(function(){return p}));var o,s=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(o||(o={}));var a={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},u=o.INFO,c=((i={})[o.DEBUG]="log",i[o.VERBOSE]="log",i[o.INFO]="info",i[o.WARN]="warn",i[o.ERROR]="error",i),l=function(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(t<e.logLevel)){var o=(new Date).toISOString(),s=c[t];if(!s)throw new Error("Attempted to log a message with an invalid logType (value: "+t+")");console[s].apply(console,r(["["+o+"]  "+e.name+":"],n))}},h=function(){function e(e){this.name=e,this._logLevel=u,this._logHandler=l,this._userLogHandler=null,s.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in o))throw new TypeError('Invalid value "'+e+'" assigned to `logLevel`');this._logLevel=e},enumerable:!1,configurable:!0}),e.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?a[e]:e},Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!1,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.DEBUG],e)),this._logHandler.apply(this,r([this,o.DEBUG],e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.VERBOSE],e)),this._logHandler.apply(this,r([this,o.VERBOSE],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.INFO],e)),this._logHandler.apply(this,r([this,o.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.WARN],e)),this._logHandler.apply(this,r([this,o.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,r([this,o.ERROR],e)),this._logHandler.apply(this,r([this,o.ERROR],e))},e}();function d(e){s.forEach((function(t){t.setLogLevel(e)}))}function p(e,t){for(var n=function(n){var r=null;t&&t.level&&(r=a[t.level]),n.userLogHandler=null===e?null:function(t,n){for(var i=[],s=2;s<arguments.length;s++)i[s-2]=arguments[s];var a=i.map((function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((function(e){return e})).join(" ");n>=(null!=r?r:t.logLevel)&&e({level:o[n].toLowerCase(),message:a,args:i,type:t.name})}},r=0,i=s;r<i.length;r++){n(i[r])}}},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var r=function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.create;Object.create;var i,o,s=n(0),a=n(2),u=n(3),c=((i={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",i["bad-app-name"]="Illegal App name: '{$appName}",i["duplicate-app"]="Firebase App named '{$appName}' already exists",i["app-deleted"]="Firebase App named '{$appName}' already deleted",i["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",i["invalid-log-argument"]="First argument to `onLog` must be null or a function.",i),l=new s.b("app","Firebase",c),h=((o={})["@firebase/app"]="fire-core",o["@firebase/analytics"]="fire-analytics",o["@firebase/app-check"]="fire-app-check",o["@firebase/auth"]="fire-auth",o["@firebase/database"]="fire-rtdb",o["@firebase/functions"]="fire-fn",o["@firebase/installations"]="fire-iid",o["@firebase/messaging"]="fire-fcm",o["@firebase/performance"]="fire-perf",o["@firebase/remote-config"]="fire-rc",o["@firebase/storage"]="fire-gcs",o["@firebase/firestore"]="fire-fst",o["fire-js"]="fire-js",o["firebase-wrapper"]="fire-js-all",o),d=new u.b("@firebase/app"),p=function(){function e(e,t,n){var r=this;this.firebase_=n,this.isDeleted_=!1,this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled||!1,this.options_=Object(s.k)(e),this.container=new a.b(t.name),this._addComponent(new a.a("app",(function(){return r}),"PUBLIC")),this.firebase_.INTERNAL.components.forEach((function(e){return r._addComponent(e)}))}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise((function(t){e.checkDestroyed_(),t()})).then((function(){return e.firebase_.INTERNAL.removeApp(e.name_),Promise.all(e.container.getProviders().map((function(e){return e.delete()})))})).then((function(){e.isDeleted_=!0}))},e.prototype._getService=function(e,t){var n;void 0===t&&(t="[DEFAULT]"),this.checkDestroyed_();var r=this.container.getProvider(e);return r.isInitialized()||"EXPLICIT"!==(null===(n=r.getComponent())||void 0===n?void 0:n.instantiationMode)||r.initialize(),r.getImmediate({identifier:t})},e.prototype._removeServiceInstance=function(e,t){void 0===t&&(t="[DEFAULT]"),this.container.getProvider(e).clearInstance(t)},e.prototype._addComponent=function(e){try{this.container.addComponent(e)}catch(t){d.debug("Component "+e.name+" failed to register with FirebaseApp "+this.name,t)}},e.prototype._addOrOverwriteComponent=function(e){this.container.addOrOverwriteComponent(e)},e.prototype.toJSON=function(){return{name:this.name,automaticDataCollectionEnabled:this.automaticDataCollectionEnabled,options:this.options}},e.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw l.create("app-deleted",{appName:this.name_})},e}();p.prototype.name&&p.prototype.options||p.prototype.delete||console.log("dc");var f=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function e(){var t=
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){var t={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={});if("object"!=typeof i||null===i){i={name:i}}var o=i;void 0===o.name&&(o.name="[DEFAULT]");var a=o.name;if("string"!=typeof a||!a)throw l.create("bad-app-name",{appName:String(a)});if(Object(s.h)(t,a))throw l.create("duplicate-app",{appName:a});var u=new e(n,o,r);return t[a]=u,u},app:i,registerVersion:function(e,t,n){var r,i=null!==(r=h[e])&&void 0!==r?r:e;n&&(i+="-"+n);var s=i.match(/\s|\//),u=t.match(/\s|\//);if(s||u){var c=['Unable to register library "'+i+'" with version "'+t+'":'];return s&&c.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),s&&u&&c.push("and"),u&&c.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void d.warn(c.join(" "))}o(new a.a(i+"-version",(function(){return{library:i,version:t}}),"VERSION"))},setLogLevel:u.c,onLog:function(e,t){if(null!==e&&"function"!=typeof e)throw l.create("invalid-log-argument");Object(u.d)(e,t)},apps:null,SDK_VERSION:"8.6.1",INTERNAL:{registerComponent:o,removeApp:function(e){delete t[e]},components:n,useAsService:function(e,t){if("serverAuth"===t)return null;return t}}};function i(e){if(e=e||"[DEFAULT]",!Object(s.h)(t,e))throw l.create("no-app",{appName:e});return t[e]}function o(o){var a=o.name;if(n.has(a))return d.debug("There were multiple attempts to register component "+a+"."),"PUBLIC"===o.type?r[a]:null;if(n.set(a,o),"PUBLIC"===o.type){var u=function(e){if(void 0===e&&(e=i()),"function"!=typeof e[a])throw l.create("invalid-app-argument",{appName:a});return e[a]()};void 0!==o.serviceProps&&Object(s.l)(u,o.serviceProps),r[a]=u,e.prototype[a]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this._getService.bind(this,a);return n.apply(this,o.multipleInstances?e:[])}}for(var c=0,h=Object.keys(t);c<h.length;c++){var p=h[c];t[p]._addComponent(o)}return"PUBLIC"===o.type?r[a]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(t).map((function(e){return t[e]}))}}),i.App=e,r}(p);return t.INTERNAL=r(r({},t.INTERNAL),{createFirebaseNamespace:e,extendNamespace:function(e){Object(s.l)(t,e)},createSubscribe:s.j,ErrorFactory:s.b,deepExtend:s.l}),t}(),_=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e)){var t=e.getImmediate();return t.library+"/"+t.version}return null})).filter((function(e){return e})).join(" ")},e}();
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if(Object(s.p)()&&void 0!==self.firebase){d.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var y=self.firebase.SDK_VERSION;y&&y.indexOf("LITE")>=0&&d.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var v=f.initializeApp;f.initializeApp=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Object(s.s)()&&d.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),v.apply(void 0,e)};var m,g,b=f;(m=b).INTERNAL.registerComponent(new a.a("platform-logger",(function(e){return new _(e)}),"PRIVATE")),m.registerVersion("@firebase/app","0.6.22",g),m.registerVersion("fire-js","");t.a=b},function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return o}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};Object.create;Object.create},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e,t){var r=n(4),i=n(2),o=n(0),s=n(1),a=n(3),u="";function c(e){u=e}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var l,h=function(){function e(e){this.domStorage_=e,this.prefix_="firebase:"}return e.prototype.set=function(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),Object(o.C)(t))},e.prototype.get=function(e){var t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:Object(o.w)(t)},e.prototype.remove=function(e){this.domStorage_.removeItem(this.prefixedName_(e))},e.prototype.prefixedName_=function(e){return this.prefix_+e},e.prototype.toString=function(){return this.domStorage_.toString()},e}(),d=function(){function e(){this.cache_={},this.isInMemoryStorage=!0}return e.prototype.set=function(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t},e.prototype.get=function(e){return Object(o.h)(this.cache_,e)?this.cache_[e]:null},e.prototype.remove=function(e){delete this.cache_[e]},e}(),p=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){var t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new h(t)}}catch(e){}return new d},f=p("localStorage"),_=p("sessionStorage"),y=new a.b("@firebase/database"),v=(l=1,function(){return l++}),m=function(e){var t=Object(o.B)(e),n=new o.c;n.update(t);var r=n.digest();return o.f.encodeByteArray(r)},g=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n="",r=0;r<e.length;r++){var i=e[r];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?n+=g.apply(null,i):n+="object"==typeof i?Object(o.C)(i):i,n+=" "}return n},b=null,w=!0,C=function(e,t){Object(o.d)(!t||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?(y.logLevel=a.a.VERBOSE,b=y.log.bind(y),t&&_.set("logging_enabled",!0)):"function"==typeof e?b=e:(b=null,_.remove("logging_enabled"))},O=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!0===w&&(w=!1,null===b&&!0===_.get("logging_enabled")&&C(!0)),b){var n=g.apply(null,e);b(n)}},E=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];O.apply(void 0,Object(s.f)([e],Object(s.e)(t)))}},T=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE INTERNAL ERROR: "+g.apply(void 0,Object(s.f)([],Object(s.e)(e)));y.error(n)},S=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE FATAL ERROR: "+g.apply(void 0,Object(s.f)([],Object(s.e)(e)));throw y.error(n),new Error(n)},I=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE WARNING: "+g.apply(void 0,Object(s.f)([],Object(s.e)(e)));y.warn(n)},k=function(e){return"number"==typeof e&&(e!=e||e===Number.POSITIVE_INFINITY||e===Number.NEGATIVE_INFINITY)},x="[MIN_NAME]",P="[MAX_NAME]",j=function(e,t){if(e===t)return 0;if(e===x||t===P)return-1;if(t===x||e===P)return 1;var n=q(e),r=q(t);return null!==n?null!==r?n-r==0?e.length-t.length:n-r:-1:null!==r?1:e<t?-1:1},N=function(e,t){return e===t?0:e<t?-1:1},R=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+Object(o.C)(t))},D=function(e){if("object"!=typeof e||null===e)return Object(o.C)(e);var t=[];for(var n in e)t.push(n);t.sort();for(var r="{",i=0;i<t.length;i++)0!==i&&(r+=","),r+=Object(o.C)(t[i]),r+=":",r+=D(e[t[i]]);return r+="}"},A=function(e,t){var n=e.length;if(n<=t)return[e];for(var r=[],i=0;i<n;i+=t)i+t>n?r.push(e.substring(i,n)):r.push(e.substring(i,i+t));return r};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function L(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}var F=function(e){Object(o.d)(!k(e),"Invalid JSON number");var t,n,r,i,s;0===e?(n=0,r=0,t=1/e==-1/0?1:0):(t=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(e)/Math.LN2),1023))+1023,r=Math.round(e*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(e/Math.pow(2,-1074))));var a=[];for(s=52;s;s-=1)a.push(r%2?1:0),r=Math.floor(r/2);for(s=11;s;s-=1)a.push(n%2?1:0),n=Math.floor(n/2);a.push(t?1:0),a.reverse();var u=a.join(""),c="";for(s=0;s<64;s+=8){var l=parseInt(u.substr(s,8),2).toString(16);1===l.length&&(l="0"+l),c+=l}return c.toLowerCase()};var M=new RegExp("^-?(0*)\\d{1,10}$"),q=function(e){if(M.test(e)){var t=Number(e);if(t>=-2147483648&&t<=2147483647)return t}return null},W=function(e){try{e()}catch(e){setTimeout((function(){var t=e.stack||"";throw I("Exception was thrown by user callback.",t),e}),Math.floor(0))}},U=function(e,t){var n=setTimeout(e,t);return"object"==typeof n&&n.unref&&n.unref(),n},B=function(){function e(e,t){var n=this;this.appName_=e,this.appCheckProvider=t,this.appCheck=null==t?void 0:t.getImmediate({optional:!0}),this.appCheck||null==t||t.get().then((function(e){return n.appCheck=e}))}return e.prototype.getToken=function(e){var t=this;return this.appCheck?this.appCheck.getToken(e):new Promise((function(n,r){setTimeout((function(){t.appCheck?t.getToken(e).then(n,r):n(null)}),0)}))},e.prototype.addTokenChangeListener=function(e){var t;null===(t=this.appCheckProvider)||void 0===t||t.get().then((function(t){return t.addTokenListener(e)}))},e.prototype.notifyForInvalidToken=function(){I('Provided AppCheck credentials for the app named "'+this.appName_+'" are invalid. This usually indicates your app was not initialized correctly.')},e}(),z=function(){function e(e,t,n){var r=this;this.appName_=e,this.firebaseOptions_=t,this.authProvider_=n,this.auth_=null,this.auth_=n.getImmediate({optional:!0}),this.auth_||n.onInit((function(e){return r.auth_=e}))}return e.prototype.getToken=function(e){var t=this;return this.auth_?this.auth_.getToken(e).catch((function(e){return e&&"auth/token-not-initialized"===e.code?(O("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e)})):new Promise((function(n,r){setTimeout((function(){t.auth_?t.getToken(e).then(n,r):n(null)}),0)}))},e.prototype.addTokenChangeListener=function(e){this.auth_?this.auth_.addAuthTokenListener(e):this.authProvider_.get().then((function(t){return t.addAuthTokenListener(e)}))},e.prototype.removeTokenChangeListener=function(e){this.authProvider_.get().then((function(t){return t.removeAuthTokenListener(e)}))},e.prototype.notifyForInvalidToken=function(){var e='Provided authentication credentials for the app named "'+this.appName_+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.firebaseOptions_?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.firebaseOptions_?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',I(e)},e}(),H=function(){function e(e){this.accessToken=e}return e.prototype.getToken=function(e){return Promise.resolve({accessToken:this.accessToken})},e.prototype.addTokenChangeListener=function(e){e(this.accessToken)},e.prototype.removeTokenChangeListener=function(e){},e.prototype.notifyForInvalidToken=function(){},e.OWNER="owner",e}(),V=/(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/,Y=function(){function e(e,t,n,r,i,o,s){void 0===i&&(i=!1),void 0===o&&(o=""),void 0===s&&(s=!1),this.secure=t,this.namespace=n,this.webSocketOnly=r,this.nodeAdmin=i,this.persistenceKey=o,this.includeNamespaceInQueryParams=s,this._host=e.toLowerCase(),this._domain=this._host.substr(this._host.indexOf(".")+1),this.internalHost=f.get("host:"+e)||this._host}return e.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},e.prototype.isCustomHost=function(){return"firebaseio.com"!==this._domain&&"firebaseio-demo.com"!==this._domain},Object.defineProperty(e.prototype,"host",{get:function(){return this._host},set:function(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&f.set("host:"+this._host,this.internalHost))},enumerable:!1,configurable:!0}),e.prototype.toString=function(){var e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e},e.prototype.toURLString=function(){var e=this.secure?"https://":"http://",t=this.includeNamespaceInQueryParams?"?ns="+this.namespace:"";return""+e+this.host+"/"+t},e}();function Q(e,t,n){var r;if(Object(o.d)("string"==typeof t,"typeof type must == string"),Object(o.d)("object"==typeof n,"typeof params must == object"),"websocket"===t)r=(e.secure?"wss://":"ws://")+e.internalHost+"/.ws?";else{if("long_polling"!==t)throw new Error("Unknown connection type: "+t);r=(e.secure?"https://":"http://")+e.internalHost+"/.lp?"}(function(e){return e.host!==e.internalHost||e.isCustomHost()||e.includeNamespaceInQueryParams})(e)&&(n.ns=e.namespace);var i=[];return L(n,(function(e,t){i.push(e+"="+t)})),r+i.join("&")}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var G=function(){function e(){this.counters_={}}return e.prototype.incrementCounter=function(e,t){void 0===t&&(t=1),Object(o.h)(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t},e.prototype.get=function(){return Object(o.k)(this.counters_)},e}(),K={},$={};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function X(e){var t=e.toString();return K[t]||(K[t]=new G),K[t]}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var J=function(){function e(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return e.prototype.closeAfter=function(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},e.prototype.handleResponse=function(e,t){var n=this;this.pendingResponses[e]=t;for(var r=function(){var e=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var t=function(t){e[t]&&W((function(){n.onMessage_(e[t])}))},r=0;r<e.length;++r)t(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},e}(),Z=function(){function e(e,t,n,r,i,o,s){var a=this;this.connId=e,this.repoInfo=t,this.applicationId=n,this.appCheckToken=r,this.authToken=i,this.transportSessionId=o,this.lastSessionId=s,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=E(e),this.stats_=X(t),this.urlFn=function(e){return a.appCheckToken&&(e.ac=a.appCheckToken),Q(t,"long_polling",e)}}return e.prototype.open=function(e,t){var n=this;this.curSegmentNum=0,this.onDisconnect_=t,this.myPacketOrderer=new J(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null}),Math.floor(3e4)),function(e){if(Object(o.t)()||"complete"===document.readyState)e();else{var t=!1,n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((function(){if(!n.isClosed_){n.scriptTagHolder=new ee((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Object(s.e)(e,5),i=r[0],o=r[1],a=r[2];r[3],r[4];if(n.incrementIncomingBytes_(e),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"===i)n.id=o,n.password=a;else{if("close"!==i)throw new Error("Unrecognized command received: "+i);o?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(o,(function(){n.onClosed_()}))):n.onClosed_()}}),(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Object(s.e)(e,2),i=r[0],o=r[1];n.incrementIncomingBytes_(e),n.myPacketOrderer.handleResponse(i,o)}),(function(){n.onClosed_()}),n.urlFn);var e={start:"t"};e.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(e.cb=n.scriptTagHolder.uniqueCallbackIdentifier),e.v="5",n.transportSessionId&&(e.s=n.transportSessionId),n.lastSessionId&&(e.ls=n.lastSessionId),n.applicationId&&(e.p=n.applicationId),n.appCheckToken&&(e.ac=n.appCheckToken),"undefined"!=typeof location&&location.hostname&&V.test(location.hostname)&&(e.r="f");var t=n.urlFn(e);n.log_("Connecting via long-poll to "+t),n.scriptTagHolder.addTag(t,(function(){}))}}))},e.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},e.forceAllow=function(){e.forceAllow_=!0},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){return!Object(o.t)()&&(!!e.forceAllow_||!(e.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))},e.prototype.markConnectionHealthy=function(){},e.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},e.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},e.prototype.send=function(e){var t=Object(o.C)(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);for(var n=Object(o.g)(t),r=A(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},e.prototype.addDisconnectPingFrame=function(e,t){if(!Object(o.t)()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=e,n.pw=t,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},e.prototype.incrementIncomingBytes_=function(e){var t=Object(o.C)(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)},e}(),ee=function(){function e(t,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,Object(o.t)())this.commandCB=t,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=v(),window["pLPCommand"+this.uniqueCallbackIdentifier]=t,window["pRTLPCB"+this.uniqueCallbackIdentifier]=n,this.myIFrame=e.createIFrame_();var s="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))s='<script>document.domain="'+document.domain+'";<\/script>';var a="<html><body>"+s+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(a),this.myIFrame.doc.close()}catch(e){O("frame writing exception"),e.stack&&O(e.stack),O(e)}}}return e.createIFrame_=function(){var e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||O("No IE domain setting required")}catch(n){var t=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+t+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e},e.prototype.close=function(){var e=this;this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout((function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)}),Math.floor(0)));var t=this.onDisconnect;t&&(this.onDisconnect=null,t())},e.prototype.startLongPoll=function(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););},e.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var e={};e.id=this.myID,e.pw=this.myPW,e.ser=this.currentSerial;for(var t=this.urlFn(e),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return t+=n,this.addLongPollTag_(t,this.currentSerial),!0}return!1},e.prototype.enqueueSegment=function(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()},e.prototype.addLongPollTag_=function(e,t){var n=this;this.outstandingRequests.add(t);var r=function(){n.outstandingRequests.delete(t),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(e,(function(){clearTimeout(i),r()}))},e.prototype.addTag=function(e,t){var n=this;Object(o.t)()?this.doNodeLongPoll(e,t):setTimeout((function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=e,r.onload=r.onreadystatechange=function(){var e=r.readyState;e&&"loaded"!==e&&"complete"!==e||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),t())},r.onerror=function(){O("Long-poll script failed to load: "+e),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(e){}}),Math.floor(1))},e}(),te=null;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */"undefined"!=typeof MozWebSocket?te=MozWebSocket:"undefined"!=typeof WebSocket&&(te=WebSocket);var ne=function(){function t(e,n,r,i,o,s,a){this.connId=e,this.applicationId=r,this.appCheckToken=i,this.authToken=o,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=E(this.connId),this.stats_=X(n),this.connURL=t.connectionURL_(n,s,a,i),this.nodeAdmin=n.nodeAdmin}return t.connectionURL_=function(e,t,n,r){var i={v:"5"};return!Object(o.t)()&&"undefined"!=typeof location&&location.hostname&&V.test(location.hostname)&&(i.r="f"),t&&(i.s=t),n&&(i.ls=n),r&&(i.ac=r),Q(e,"websocket",i)},t.prototype.open=function(t,n){var r=this;this.onDisconnect=n,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,f.set("previous_websocket_failure",!0);try{if(Object(o.t)()){var i=this.nodeAdmin?"AdminNode":"Node",s={headers:{"User-Agent":"Firebase/5/"+u+"/"+e.platform+"/"+i,"X-Firebase-GMPID":this.applicationId||""}};this.nodeAdmin?s.headers.Authorization=this.authToken||"":s.headers["X-Firebase-AppCheck"]=this.appCheckToken||"";var a=e.env,c=0===this.connURL.indexOf("wss://")?a.HTTPS_PROXY||a.https_proxy:a.HTTP_PROXY||a.http_proxy;c&&(s.proxy={origin:c}),this.mySock=new te(this.connURL,[],s)}else{s={headers:{"X-Firebase-GMPID":this.applicationId||"","X-Firebase-AppCheck":this.appCheckToken||""}};this.mySock=new te(this.connURL,[],s)}}catch(e){this.log_("Error instantiating WebSocket.");var l=e.message||e.data;return l&&this.log_(l),void this.onClosed_()}this.mySock.onopen=function(){r.log_("Websocket connected."),r.everConnected_=!0},this.mySock.onclose=function(){r.log_("Websocket connection was disconnected."),r.mySock=null,r.onClosed_()},this.mySock.onmessage=function(e){r.handleIncomingFrame(e)},this.mySock.onerror=function(e){r.log_("WebSocket error.  Closing connection.");var t=e.message||e.data;t&&r.log_(t),r.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==te&&!t.forceDisallow_},t.previouslyFailed=function(){return f.isInMemoryStorage||!0===f.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){f.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(e){if(this.frames.push(e),this.frames.length===this.totalFrames){var t=this.frames.join("");this.frames=null;var n=Object(o.w)(t);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(e){this.totalFrames=e,this.frames=[]},t.prototype.extractFrameCount_=function(e){if(Object(o.d)(null===this.frames,"We already have a frame buffer"),e.length<=6){var t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e},t.prototype.handleIncomingFrame=function(e){if(null!==this.mySock){var t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{var n=this.extractFrameCount_(t);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(e){this.resetKeepAlive();var t=Object(o.C)(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);var n=A(t,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var e=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((function(){e.mySock&&e.sendString_("0"),e.resetKeepAlive()}),Math.floor(45e3))},t.prototype.sendString_=function(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}(),re=function(){function e(e){this.initTransports_(e)}return Object.defineProperty(e,"ALL_TRANSPORTS",{get:function(){return[Z,ne]},enumerable:!1,configurable:!0}),e.prototype.initTransports_=function(t){var n,r,i=ne&&ne.isAvailable(),o=i&&!ne.previouslyFailed();if(t.webSocketOnly&&(i||I("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),o=!0),o)this.transports_=[ne];else{var a=this.transports_=[];try{for(var u=Object(s.g)(e.ALL_TRANSPORTS),c=u.next();!c.done;c=u.next()){var l=c.value;l&&l.isAvailable()&&a.push(l)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}},e.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},e.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},e}(),ie=function(){function e(e,t,n,r,i,o,s,a,u,c){this.id=e,this.repoInfo_=t,this.applicationId_=n,this.appCheckToken_=r,this.authToken_=i,this.onMessage_=o,this.onReady_=s,this.onDisconnect_=a,this.onKill_=u,this.lastSessionId=c,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=E("c:"+this.id+":"),this.transportManager_=new re(t),this.log_("Connection created"),this.start_()}return e.prototype.start_=function(){var e=this,t=this.transportManager_.initialTransport();this.conn_=new t(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.lastSessionId),this.primaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((function(){e.conn_&&e.conn_.open(n,r)}),Math.floor(0));var i=t.healthyTimeout||0;i>0&&(this.healthyTimeout_=U((function(){e.healthyTimeout_=null,e.isHealthy_||(e.conn_&&e.conn_.bytesReceived>102400?(e.log_("Connection exceeded healthy timeout but has received "+e.conn_.bytesReceived+" bytes.  Marking connection healthy."),e.isHealthy_=!0,e.conn_.markConnectionHealthy()):e.conn_&&e.conn_.bytesSent>10240?e.log_("Connection exceeded healthy timeout but has sent "+e.conn_.bytesSent+" bytes.  Leaving connection alive."):(e.log_("Closing unhealthy connection after timeout."),e.close()))}),Math.floor(i)))},e.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},e.prototype.disconnReceiver_=function(e){var t=this;return function(n){e===t.conn_?t.onConnectionLost_(n):e===t.secondaryConn_?(t.log_("Secondary connection lost."),t.onSecondaryConnectionLost_()):t.log_("closing an old connection")}},e.prototype.connReceiver_=function(e){var t=this;return function(n){2!==t.state_&&(e===t.rx_?t.onPrimaryMessageReceived_(n):e===t.secondaryConn_?t.onSecondaryMessageReceived_(n):t.log_("message on old connection"))}},e.prototype.sendRequest=function(e){var t={t:"d",d:e};this.sendData_(t)},e.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},e.prototype.onSecondaryControl_=function(e){if("t"in e){var t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},e.prototype.onSecondaryMessageReceived_=function(e){var t=R("t",e),n=R("d",e);if("c"===t)this.onSecondaryControl_(n);else{if("d"!==t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}},e.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},e.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},e.prototype.onPrimaryMessageReceived_=function(e){var t=R("t",e),n=R("d",e);"c"===t?this.onControl_(n):"d"===t&&this.onDataMessage_(n)},e.prototype.onDataMessage_=function(e){this.onPrimaryResponse_(),this.onMessage_(e)},e.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},e.prototype.onControl_=function(e){var t=R("t",e);if("d"in e){var n=e.d;if("h"===t)this.onHandshake_(n);else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?T("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):T("Unknown control packet command: "+t)}},e.prototype.onHandshake_=function(e){var t=e.ts,n=e.v,r=e.h;this.sessionId=e.s,this.repoInfo_.host=r,0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),"5"!==n&&I("Protocol version mismatch detected"),this.tryStartUpgrade_())},e.prototype.tryStartUpgrade_=function(){var e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)},e.prototype.startUpgrade_=function(e){var t=this;this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),U((function(){t.secondaryConn_&&(t.log_("Timed out trying to upgrade."),t.secondaryConn_.close())}),Math.floor(6e4))},e.prototype.onReset_=function(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.host=e,1===this.state_?this.close():(this.closeConnections_(),this.start_())},e.prototype.onConnectionEstablished_=function(e,t){var n=this;this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):U((function(){n.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))},e.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},e.prototype.onSecondaryConnectionLost_=function(){var e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()},e.prototype.onConnectionLost_=function(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(f.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},e.prototype.onConnectionShutdown_=function(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()},e.prototype.sendData_=function(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)},e.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},e.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},e}(),oe=function(){function e(){}return e.prototype.put=function(e,t,n,r){},e.prototype.merge=function(e,t,n,r){},e.prototype.refreshAuthToken=function(e){},e.prototype.refreshAppCheckToken=function(e){},e.prototype.onDisconnectPut=function(e,t,n){},e.prototype.onDisconnectMerge=function(e,t,n){},e.prototype.onDisconnectCancel=function(e,t){},e.prototype.reportStats=function(e){},e}(),se=function(){function e(e){this.allowedEvents_=e,this.listeners_={},Object(o.d)(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}return e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(this.listeners_[e]))for(var r=Object(s.f)([],Object(s.e)(this.listeners_[e])),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,t)},e.prototype.on=function(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});var r=this.getInitialEvent(e);r&&t.apply(n,r)},e.prototype.off=function(e,t,n){this.validateEventType_(e);for(var r=this.listeners_[e]||[],i=0;i<r.length;i++)if(r[i].callback===t&&(!n||n===r[i].context))return void r.splice(i,1)},e.prototype.validateEventType_=function(e){Object(o.d)(this.allowedEvents_.find((function(t){return t===e})),"Unknown event: "+e)},e}(),ae=function(e){function t(){var t=e.call(this,["online"])||this;return t.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||Object(o.r)()||(window.addEventListener("online",(function(){t.online_||(t.online_=!0,t.trigger("online",!0))}),!1),window.addEventListener("offline",(function(){t.online_&&(t.online_=!1,t.trigger("online",!1))}),!1)),t}return Object(s.c)(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return Object(o.d)("online"===e,"Unknown event type: "+e),[this.online_]},t.prototype.currentlyOnline=function(){return this.online_},t}(se),ue=function(){function e(e,t){if(void 0===t){this.pieces_=e.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}return e.prototype.toString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function ce(){return new ue("")}function le(e){return e.pieceNum_>=e.pieces_.length?null:e.pieces_[e.pieceNum_]}function he(e){return e.pieces_.length-e.pieceNum_}function de(e){var t=e.pieceNum_;return t<e.pieces_.length&&t++,new ue(e.pieces_,t)}function pe(e){return e.pieceNum_<e.pieces_.length?e.pieces_[e.pieces_.length-1]:null}function fe(e,t){return void 0===t&&(t=0),e.pieces_.slice(e.pieceNum_+t)}function _e(e){if(e.pieceNum_>=e.pieces_.length)return null;for(var t=[],n=e.pieceNum_;n<e.pieces_.length-1;n++)t.push(e.pieces_[n]);return new ue(t,0)}function ye(e,t){for(var n=[],r=e.pieceNum_;r<e.pieces_.length;r++)n.push(e.pieces_[r]);if(t instanceof ue)for(r=t.pieceNum_;r<t.pieces_.length;r++)n.push(t.pieces_[r]);else{var i=t.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new ue(n,0)}function ve(e){return e.pieceNum_>=e.pieces_.length}function me(e,t){var n=le(e),r=le(t);if(null===n)return t;if(n===r)return me(de(e),de(t));throw new Error("INTERNAL ERROR: innerPath ("+t+") is not within outerPath ("+e+")")}function ge(e,t){for(var n=fe(e,0),r=fe(t,0),i=0;i<n.length&&i<r.length;i++){var o=j(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1}function be(e,t){if(he(e)!==he(t))return!1;for(var n=e.pieceNum_,r=t.pieceNum_;n<=e.pieces_.length;n++,r++)if(e.pieces_[n]!==t.pieces_[r])return!1;return!0}function we(e,t){var n=e.pieceNum_,r=t.pieceNum_;if(he(e)>he(t))return!1;for(;n<e.pieces_.length;){if(e.pieces_[n]!==t.pieces_[r])return!1;++n,++r}return!0}var Ce=function(e,t){this.errorPrefix_=t,this.parts_=fe(e,0),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=Object(o.A)(this.parts_[n]);Oe(this)};function Oe(e){if(e.byteLength_>768)throw new Error(e.errorPrefix_+"has a key path longer than 768 bytes ("+e.byteLength_+").");if(e.parts_.length>32)throw new Error(e.errorPrefix_+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Ee(e))}function Ee(e){return 0===e.parts_.length?"":"in property '"+e.parts_.join(".")+"'"}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Te,Se,Ie=function(e){function t(){var t,n,r=e.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",t="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",t="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",t="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",t="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,(function(){var e=!document[t];e!==r.visible_&&(r.visible_=e,r.trigger("visible",e))}),!1),r}return Object(s.c)(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return Object(o.d)("visible"===e,"Unknown event type: "+e),[this.visible_]},t}(se),ke=function(e){function t(n,r,i,s,a,u,c,l){var h=e.call(this)||this;if(h.repoInfo_=n,h.applicationId_=r,h.onDataUpdate_=i,h.onConnectStatus_=s,h.onServerInfoUpdate_=a,h.authTokenProvider_=u,h.appCheckTokenProvider_=c,h.authOverride_=l,h.id=t.nextPersistentConnectionId_++,h.log_=E("p:"+h.id+":"),h.interruptReasons_={},h.listens=new Map,h.outstandingPuts_=[],h.outstandingGets_=[],h.outstandingPutCount_=0,h.outstandingGetCount_=0,h.onDisconnectRequestQueue_=[],h.connected_=!1,h.reconnectDelay_=1e3,h.maxReconnectDelay_=3e5,h.securityDebugCallback_=null,h.lastSessionId=null,h.establishConnectionTimer_=null,h.visible_=!1,h.requestCBHash_={},h.requestNumber_=0,h.realtime_=null,h.authToken_=null,h.appCheckToken_=null,h.forceTokenRefresh_=!1,h.invalidAuthTokenCount_=0,h.invalidAppCheckTokenCount_=0,h.firstConnection_=!0,h.lastConnectionAttemptTime_=null,h.lastConnectionEstablishedTime_=null,l&&!Object(o.t)())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return Ie.getInstance().on("visible",h.onVisible_,h),-1===n.host.indexOf("fblocal")&&ae.getInstance().on("online",h.onOnline_,h),h}return Object(s.c)(t,e),t.prototype.sendRequest=function(e,t,n){var r=++this.requestNumber_,i={r:r,a:e,b:t};this.log_(Object(o.C)(i)),Object(o.d)(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},t.prototype.get=function(e){var t=this;this.initConnection_();var n=new o.a,r={p:e._path.toString(),q:e._queryObject},i={action:"g",request:r,onComplete:function(e){var i=e.d;"ok"===e.s?(t.onDataUpdate_(r.p,i,!1,null),n.resolve(i)):n.reject(i)}};this.outstandingGets_.push(i),this.outstandingGetCount_++;var s=this.outstandingGets_.length-1;return this.connected_||setTimeout((function(){var e=t.outstandingGets_[s];void 0!==e&&i===e&&(delete t.outstandingGets_[s],t.outstandingGetCount_--,0===t.outstandingGetCount_&&(t.outstandingGets_=[]),t.log_("get "+s+" timed out on connection"),n.reject(new Error("Client is offline.")))}),3e3),this.connected_&&this.sendGet_(s),n.promise},t.prototype.listen=function(e,t,n,r){this.initConnection_();var i=e._queryIdentifier,s=e._path.toString();this.log_("Listen called for "+s+" "+i),this.listens.has(s)||this.listens.set(s,new Map),Object(o.d)(e._queryParams.isDefault()||!e._queryParams.loadsAllData(),"listen() called for non-default but complete query"),Object(o.d)(!this.listens.get(s).has(i),"listen() called twice for same path/queryId.");var a={onComplete:r,hashFn:t,query:e,tag:n};this.listens.get(s).set(i,a),this.connected_&&this.sendListen_(a)},t.prototype.sendGet_=function(e){var t=this,n=this.outstandingGets_[e];this.sendRequest("g",n.request,(function(r){delete t.outstandingGets_[e],t.outstandingGetCount_--,0===t.outstandingGetCount_&&(t.outstandingGets_=[]),n.onComplete&&n.onComplete(r)}))},t.prototype.sendListen_=function(e){var n=this,r=e.query,i=r._path.toString(),o=r._queryIdentifier;this.log_("Listen on "+i+" for "+o);var s={p:i};e.tag&&(s.q=r._queryObject,s.t=e.tag),s.h=e.hashFn(),this.sendRequest("q",s,(function(s){var a=s.d,u=s.s;t.warnOnListenWarnings_(a,r),(n.listens.get(i)&&n.listens.get(i).get(o))===e&&(n.log_("listen response",s),"ok"!==u&&n.removeListen_(i,o),e.onComplete&&e.onComplete(u,a))}))},t.warnOnListenWarnings_=function(e,t){if(e&&"object"==typeof e&&Object(o.h)(e,"w")){var n=Object(o.z)(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+t._queryParams.getIndex().toString()+'"',i=t._path.toString();I("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},t.prototype.refreshAuthToken=function(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(function(){})),this.reduceReconnectDelayIfAdminCredential_(e)},t.prototype.reduceReconnectDelayIfAdminCredential_=function(e){(e&&40===e.length||Object(o.o)(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},t.prototype.refreshAppCheckToken=function(e){this.appCheckToken_=e,this.log_("App check token refreshed"),this.appCheckToken_?this.tryAppCheck():this.connected_&&this.sendRequest("unappeck",{},(function(){}))},t.prototype.tryAuth=function(){var e=this;if(this.connected_&&this.authToken_){var t=this.authToken_,n=Object(o.v)(t)?"auth":"gauth",r={cred:t};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,(function(n){var r=n.s,i=n.d||"error";e.authToken_===t&&("ok"===r?e.invalidAuthTokenCount_=0:e.onAuthRevoked_(r,i))}))}},t.prototype.tryAppCheck=function(){var e=this;this.connected_&&this.appCheckToken_&&this.sendRequest("appcheck",{token:this.appCheckToken_},(function(t){var n=t.s,r=t.d||"error";"ok"===n?e.invalidAppCheckTokenCount_=0:e.onAppCheckRevoked_(n,r)}))},t.prototype.unlisten=function(e,t){var n=e._path.toString(),r=e._queryIdentifier;this.log_("Unlisten called for "+n+" "+r),Object(o.d)(e._queryParams.isDefault()||!e._queryParams.loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,e._queryObject,t)},t.prototype.sendUnlisten_=function(e,t,n,r){this.log_("Unlisten on "+e+" for "+t);var i={p:e};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},t.prototype.onDisconnectPut=function(e,t,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})},t.prototype.onDisconnectMerge=function(e,t,n){this.initConnection_(),this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})},t.prototype.onDisconnectCancel=function(e,t){this.initConnection_(),this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})},t.prototype.sendOnDisconnect_=function(e,t,n,r){var i={p:t,d:n};this.log_("onDisconnect "+e,i),this.sendRequest(e,i,(function(e){r&&setTimeout((function(){r(e.s,e.d)}),Math.floor(0))}))},t.prototype.put=function(e,t,n,r){this.putInternal("p",e,t,n,r)},t.prototype.merge=function(e,t,n,r){this.putInternal("m",e,t,n,r)},t.prototype.putInternal=function(e,t,n,r,i){this.initConnection_();var o={p:t,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:e,request:o,onComplete:r}),this.outstandingPutCount_++;var s=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(s):this.log_("Buffering put: "+t)},t.prototype.sendPut_=function(e){var t=this,n=this.outstandingPuts_[e].action,r=this.outstandingPuts_[e].request,i=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(n,r,(function(r){t.log_(n+" response",r),delete t.outstandingPuts_[e],t.outstandingPutCount_--,0===t.outstandingPutCount_&&(t.outstandingPuts_=[]),i&&i(r.s,r.d)}))},t.prototype.reportStats=function(e){var t=this;if(this.connected_){var n={c:e};this.log_("reportStats",n),this.sendRequest("s",n,(function(e){if("ok"!==e.s){var n=e.d;t.log_("reportStats","Error sending stats: "+n)}}))}},t.prototype.onDataMessage_=function(e){if("r"in e){this.log_("from server: "+Object(o.C)(e));var t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}},t.prototype.onDataPush_=function(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"apc"===e?this.onAppCheckRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):T("Unrecognized action received from server: "+Object(o.C)(e)+"\nAre you using the latest client?")},t.prototype.onReady_=function(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},t.prototype.scheduleConnect_=function(e){var t=this;Object(o.d)(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((function(){t.establishConnectionTimer_=null,t.establishConnection_()}),Math.floor(e))},t.prototype.initConnection_=function(){!this.realtime_&&this.firstConnection_&&this.scheduleConnect_(0)},t.prototype.onVisible_=function(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0)),this.visible_=e},t.prototype.onOnline_=function(e){e?(this.log_("Browser went online."),this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},t.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=1e3),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var e=(new Date).getTime()-this.lastConnectionAttemptTime_,t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},t.prototype.establishConnection_=function(){return Object(s.b)(this,void 0,void 0,(function(){var e,n,r,i,a,u,c,l,h,d,p,f,_,y,v=this;return Object(s.d)(this,(function(m){switch(m.label){case 0:if(!this.shouldReconnect_())return[3,4];this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null,e=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+t.nextConnectionId_++,a=this.lastSessionId,u=!1,c=null,l=function(){c?c.close():(u=!0,r())},h=function(e){Object(o.d)(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(e)},this.realtime_={close:l,sendRequest:h},d=this.forceTokenRefresh_,this.forceTokenRefresh_=!1,m.label=1;case 1:return m.trys.push([1,3,,4]),[4,Promise.all([this.authTokenProvider_.getToken(d),this.appCheckTokenProvider_.getToken(d)])];case 2:return p=s.e.apply(void 0,[m.sent(),2]),f=p[0],_=p[1],u?O("getToken() completed but was canceled"):(O("getToken() completed. Creating connection."),this.authToken_=f&&f.accessToken,this.appCheckToken_=_&&_.token,c=new ie(i,this.repoInfo_,this.applicationId_,this.appCheckToken_,this.authToken_,e,n,r,(function(e){I(e+" ("+v.repoInfo_.toString()+")"),v.interrupt("server_kill")}),a)),[3,4];case 3:return y=m.sent(),this.log_("Failed to get token: "+y),u||(this.repoInfo_.nodeAdmin&&I(y),l()),[3,4];case 4:return[2]}}))}))},t.prototype.interrupt=function(e){O("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},t.prototype.resume=function(e){O("Resuming connection for reason: "+e),delete this.interruptReasons_[e],Object(o.q)(this.interruptReasons_)&&(this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0))},t.prototype.handleTimestamp_=function(e){var t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})},t.prototype.cancelSentTransactions_=function(){for(var e=0;e<this.outstandingPuts_.length;e++){var t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},t.prototype.onListenRevoked_=function(e,t){var n;n=t?t.map((function(e){return D(e)})).join("$"):"default";var r=this.removeListen_(e,n);r&&r.onComplete&&r.onComplete("permission_denied")},t.prototype.removeListen_=function(e,t){var n,r=new ue(e).toString();if(this.listens.has(r)){var i=this.listens.get(r);n=i.get(t),i.delete(t),0===i.size&&this.listens.delete(r)}else n=void 0;return n},t.prototype.onAuthRevoked_=function(e,t){O("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},t.prototype.onAppCheckRevoked_=function(e,t){O("App check token revoked: "+e+"/"+t),this.appCheckToken_=null,this.forceTokenRefresh_=!0,"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAppCheckTokenCount_++,this.invalidAppCheckTokenCount_>=3&&this.appCheckTokenProvider_.notifyForInvalidToken())},t.prototype.onSecurityDebugPacket_=function(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))},t.prototype.restoreState_=function(){var e,t,n,r;this.tryAuth(),this.tryAppCheck();try{for(var i=Object(s.g)(this.listens.values()),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,Object(s.g)(a.values())),c=u.next();!c.done;c=u.next()){var l=c.value;this.sendListen_(l)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}for(var h=0;h<this.outstandingPuts_.length;h++)this.outstandingPuts_[h]&&this.sendPut_(h);for(;this.onDisconnectRequestQueue_.length;){var d=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(d.action,d.pathString,d.data,d.onComplete)}for(h=0;h<this.outstandingGets_.length;h++)this.outstandingGets_[h]&&this.sendGet_(h)},t.prototype.sendConnectStats_=function(){var e={},t="js";Object(o.t)()&&(t=this.repoInfo_.nodeAdmin?"admin_node":"node"),e["sdk."+t+"."+u.replace(/\./g,"-")]=1,Object(o.r)()?e["framework.cordova"]=1:Object(o.u)()&&(e["framework.reactnative"]=1),this.reportStats(e)},t.prototype.shouldReconnect_=function(){var e=ae.getInstance().currentlyOnline();return Object(o.q)(this.interruptReasons_)&&e},t.nextPersistentConnectionId_=0,t.nextConnectionId_=0,t}(oe),xe=function(){function e(e,t){this.name=e,this.node=t}return e.Wrap=function(t,n){return new e(t,n)},e}(),Pe=function(){function e(){}return e.prototype.getCompare=function(){return this.compare.bind(this)},e.prototype.indexedValueChanged=function(e,t){var n=new xe(x,e),r=new xe(x,t);return 0!==this.compare(n,r)},e.prototype.minPost=function(){return xe.MIN},e}(),je=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.c)(t,e),Object.defineProperty(t,"__EMPTY_NODE",{get:function(){return Te},set:function(e){Te=e},enumerable:!1,configurable:!0}),t.prototype.compare=function(e,t){return j(e.name,t.name)},t.prototype.isDefinedOn=function(e){throw Object(o.e)("KeyIndex.isDefinedOn not expected to be called.")},t.prototype.indexedValueChanged=function(e,t){return!1},t.prototype.minPost=function(){return xe.MIN},t.prototype.maxPost=function(){return new xe(P,Te)},t.prototype.makePost=function(e,t){return Object(o.d)("string"==typeof e,"KeyIndex indexValue must always be a string."),new xe(e,Te)},t.prototype.toString=function(){return".key"},t}(Pe),Ne=new je,Re=function(){function e(e,t,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!e.isEmpty();)if(e=e,o=t?n(e.key,t):1,r&&(o*=-1),o<0)e=this.isReverse_?e.left:e.right;else{if(0===o){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}return e.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e},e.prototype.hasNext=function(){return this.nodeStack_.length>0},e.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}},e}(),De=function(){function e(t,n,r,i,o){this.key=t,this.value=n,this.color=null!=r?r:e.RED,this.left=null!=i?i:Le.EMPTY_NODE,this.right=null!=o?o:Le.EMPTY_NODE}return e.prototype.copy=function(t,n,r,i,o){return new e(null!=t?t:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},e.prototype.count=function(){return this.left.count()+1+this.right.count()},e.prototype.isEmpty=function(){return!1},e.prototype.inorderTraversal=function(e){return this.left.inorderTraversal(e)||!!e(this.key,this.value)||this.right.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)},e.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},e.prototype.minKey=function(){return this.min_().key},e.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},e.prototype.insert=function(e,t,n){var r=this,i=n(e,r.key);return(r=i<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===i?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n))).fixUp_()},e.prototype.removeMin_=function(){if(this.left.isEmpty())return Le.EMPTY_NODE;var e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),(e=e.copy(null,null,null,e.left.removeMin_(),null)).fixUp_()},e.prototype.remove=function(e,t){var n,r;if(t(e,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return Le.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()},e.prototype.isRed_=function(){return this.color},e.prototype.fixUp_=function(){var e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e},e.prototype.moveRedLeft_=function(){var e=this.colorFlip_();return e.right.left.isRed_()&&(e=(e=(e=e.copy(null,null,null,null,e.right.rotateRight_())).rotateLeft_()).colorFlip_()),e},e.prototype.moveRedRight_=function(){var e=this.colorFlip_();return e.left.left.isRed_()&&(e=(e=e.rotateRight_()).colorFlip_()),e},e.prototype.rotateLeft_=function(){var t=this.copy(null,null,e.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)},e.prototype.rotateRight_=function(){var t=this.copy(null,null,e.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)},e.prototype.colorFlip_=function(){var e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)},e.prototype.checkMaxDepth_=function(){var e=this.check_();return Math.pow(2,e)<=this.count()+1},e.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");var e=this.left.check_();if(e!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)},e.RED=!0,e.BLACK=!1,e}(),Ae=function(){function e(){}return e.prototype.copy=function(e,t,n,r,i){return this},e.prototype.insert=function(e,t,n){return new De(e,t,null)},e.prototype.remove=function(e,t){return this},e.prototype.count=function(){return 0},e.prototype.isEmpty=function(){return!0},e.prototype.inorderTraversal=function(e){return!1},e.prototype.reverseTraversal=function(e){return!1},e.prototype.minKey=function(){return null},e.prototype.maxKey=function(){return null},e.prototype.check_=function(){return 0},e.prototype.isRed_=function(){return!1},e}(),Le=function(){function e(t,n){void 0===n&&(n=e.EMPTY_NODE),this.comparator_=t,this.root_=n}return e.prototype.insert=function(t,n){return new e(this.comparator_,this.root_.insert(t,n,this.comparator_).copy(null,null,De.BLACK,null,null))},e.prototype.remove=function(t){return new e(this.comparator_,this.root_.remove(t,this.comparator_).copy(null,null,De.BLACK,null,null))},e.prototype.get=function(e){for(var t,n=this.root_;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key)))return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null},e.prototype.getPredecessorKey=function(e){for(var t,n=this.root_,r=null;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},e.prototype.isEmpty=function(){return this.root_.isEmpty()},e.prototype.count=function(){return this.root_.count()},e.prototype.minKey=function(){return this.root_.minKey()},e.prototype.maxKey=function(){return this.root_.maxKey()},e.prototype.inorderTraversal=function(e){return this.root_.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.root_.reverseTraversal(e)},e.prototype.getIterator=function(e){return new Re(this.root_,null,this.comparator_,!1,e)},e.prototype.getIteratorFrom=function(e,t){return new Re(this.root_,e,this.comparator_,!1,t)},e.prototype.getReverseIteratorFrom=function(e,t){return new Re(this.root_,e,this.comparator_,!0,t)},e.prototype.getReverseIterator=function(e){return new Re(this.root_,null,this.comparator_,!0,e)},e.EMPTY_NODE=new Ae,e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Fe(e,t){return j(e.name,t.name)}function Me(e,t){return j(e,t)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var qe,We,Ue,Be=function(e){return"number"==typeof e?"number:"+F(e):"string:"+e},ze=function(e){if(e.isLeafNode()){var t=e.val();Object(o.d)("string"==typeof t||"number"==typeof t||"object"==typeof t&&Object(o.h)(t,".sv"),"Priority must be a string or number.")}else Object(o.d)(e===Se||e.isEmpty(),"priority of unexpected type.");Object(o.d)(e===Se||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},He=function(){function e(t,n){void 0===n&&(n=e.__childrenNodeConstructor.EMPTY_NODE),this.value_=t,this.priorityNode_=n,this.lazyHash_=null,Object(o.d)(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),ze(this.priorityNode_)}return Object.defineProperty(e,"__childrenNodeConstructor",{get:function(){return qe},set:function(e){qe=e},enumerable:!1,configurable:!0}),e.prototype.isLeafNode=function(){return!0},e.prototype.getPriority=function(){return this.priorityNode_},e.prototype.updatePriority=function(t){return new e(this.value_,t)},e.prototype.getImmediateChild=function(t){return".priority"===t?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.getChild=function(t){return ve(t)?this:".priority"===le(t)?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.hasChild=function(){return!1},e.prototype.getPredecessorChildName=function(e,t){return null},e.prototype.updateImmediateChild=function(t,n){return".priority"===t?this.updatePriority(n):n.isEmpty()&&".priority"!==t?this:e.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(t,n).updatePriority(this.priorityNode_)},e.prototype.updateChild=function(t,n){var r=le(t);return null===r?n:n.isEmpty()&&".priority"!==r?this:(Object(o.d)(".priority"!==r||1===he(t),".priority must be the last token in a path"),this.updateImmediateChild(r,e.__childrenNodeConstructor.EMPTY_NODE.updateChild(de(t),n)))},e.prototype.isEmpty=function(){return!1},e.prototype.numChildren=function(){return 0},e.prototype.forEachChild=function(e,t){return!1},e.prototype.val=function(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.priorityNode_.isEmpty()||(e+="priority:"+Be(this.priorityNode_.val())+":");var t=typeof this.value_;e+=t+":",e+="number"===t?F(this.value_):this.value_,this.lazyHash_=m(e)}return this.lazyHash_},e.prototype.getValue=function(){return this.value_},e.prototype.compareTo=function(t){return t===e.__childrenNodeConstructor.EMPTY_NODE?1:t instanceof e.__childrenNodeConstructor?-1:(Object(o.d)(t.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(t))},e.prototype.compareToLeafNode_=function(t){var n=typeof t.value_,r=typeof this.value_,i=e.VALUE_TYPE_ORDER.indexOf(n),s=e.VALUE_TYPE_ORDER.indexOf(r);return Object(o.d)(i>=0,"Unknown leaf type: "+n),Object(o.d)(s>=0,"Unknown leaf type: "+r),i===s?"object"===r?0:this.value_<t.value_?-1:this.value_===t.value_?0:1:s-i},e.prototype.withIndex=function(){return this},e.prototype.isIndexed=function(){return!0},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode()){var t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1},e.VALUE_TYPE_ORDER=["object","boolean","number","string"],e}();var Ve,Ye,Qe=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.c)(t,e),t.prototype.compare=function(e,t){var n=e.node.getPriority(),r=t.node.getPriority(),i=n.compareTo(r);return 0===i?j(e.name,t.name):i},t.prototype.isDefinedOn=function(e){return!e.getPriority().isEmpty()},t.prototype.indexedValueChanged=function(e,t){return!e.getPriority().equals(t.getPriority())},t.prototype.minPost=function(){return xe.MIN},t.prototype.maxPost=function(){return new xe(P,new He("[PRIORITY-POST]",Ue))},t.prototype.makePost=function(e,t){var n=We(e);return new xe(t,new He("[PRIORITY-POST]",n))},t.prototype.toString=function(){return".priority"},t}(Pe)),Ge=Math.log(2),Ke=function(){function e(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/Ge,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=e+1&r}return e.prototype.nextBitIsOne=function(){var e=!(this.bits_&1<<this.current_);return this.current_--,e},e}(),$e=function(e,t,n,r){e.sort(t);var i=function(t,r){var o,s,a=r-t;if(0===a)return null;if(1===a)return o=e[t],s=n?n(o):o,new De(s,o.node,De.BLACK,null,null);var u=parseInt(a/2,10)+t,c=i(t,u),l=i(u+1,r);return o=e[u],s=n?n(o):o,new De(s,o.node,De.BLACK,c,l)},o=function(t){for(var r=null,o=null,s=e.length,a=function(t,r){var o=s-t,a=s;s-=t;var c=i(o+1,a),l=e[o],h=n?n(l):l;u(new De(h,l.node,r,null,c))},u=function(e){r?(r.left=e,r=e):(o=e,r=e)},c=0;c<t.count;++c){var l=t.nextBitIsOne(),h=Math.pow(2,t.count-(c+1));l?a(h,De.BLACK):(a(h,De.BLACK),a(h,De.RED))}return o}(new Ke(e.length));return new Le(r||t,o)},Xe={},Je=function(){function e(e,t){this.indexes_=e,this.indexSet_=t}return Object.defineProperty(e,"Default",{get:function(){return Object(o.d)(Xe&&Qe,"ChildrenNode.ts has not been loaded"),Ve=Ve||new e({".priority":Xe},{".priority":Qe})},enumerable:!1,configurable:!0}),e.prototype.get=function(e){var t=Object(o.z)(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t instanceof Le?t:null},e.prototype.hasIndex=function(e){return Object(o.h)(this.indexSet_,e.toString())},e.prototype.addIndex=function(t,n){Object(o.d)(t!==Ne,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,i=[],a=!1,u=n.getIterator(xe.Wrap),c=u.getNext();c;)a=a||t.isDefinedOn(c.node),i.push(c),c=u.getNext();r=a?$e(i,t.getCompare()):Xe;var l=t.toString(),h=Object(s.a)({},this.indexSet_);h[l]=t;var d=Object(s.a)({},this.indexes_);return d[l]=r,new e(d,h)},e.prototype.addToIndexes=function(t,n){var r=this;return new e(Object(o.x)(this.indexes_,(function(e,i){var s=Object(o.z)(r.indexSet_,i);if(Object(o.d)(s,"Missing index implementation for "+i),e===Xe){if(s.isDefinedOn(t.node)){for(var a=[],u=n.getIterator(xe.Wrap),c=u.getNext();c;)c.name!==t.name&&a.push(c),c=u.getNext();return a.push(t),$e(a,s.getCompare())}return Xe}var l=n.get(t.name),h=e;return l&&(h=h.remove(new xe(t.name,l))),h.insert(t,t.node)})),this.indexSet_)},e.prototype.removeFromIndexes=function(t,n){return new e(Object(o.x)(this.indexes_,(function(e){if(e===Xe)return e;var r=n.get(t.name);return r?e.remove(new xe(t.name,r)):e})),this.indexSet_)},e}(),Ze=function(){function e(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&ze(this.priorityNode_),this.children_.isEmpty()&&Object(o.d)(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(e,"EMPTY_NODE",{get:function(){return Ye||(Ye=new e(new Le(Me),null,Je.Default))},enumerable:!1,configurable:!0}),e.prototype.isLeafNode=function(){return!1},e.prototype.getPriority=function(){return this.priorityNode_||Ye},e.prototype.updatePriority=function(t){return this.children_.isEmpty()?this:new e(this.children_,t,this.indexMap_)},e.prototype.getImmediateChild=function(e){if(".priority"===e)return this.getPriority();var t=this.children_.get(e);return null===t?Ye:t},e.prototype.getChild=function(e){var t=le(e);return null===t?this:this.getImmediateChild(t).getChild(de(e))},e.prototype.hasChild=function(e){return null!==this.children_.get(e)},e.prototype.updateImmediateChild=function(t,n){if(Object(o.d)(n,"We should always be passing snapshot nodes"),".priority"===t)return this.updatePriority(n);var r=new xe(t,n),i=void 0,s=void 0;n.isEmpty()?(i=this.children_.remove(t),s=this.indexMap_.removeFromIndexes(r,this.children_)):(i=this.children_.insert(t,n),s=this.indexMap_.addToIndexes(r,this.children_));var a=i.isEmpty()?Ye:this.priorityNode_;return new e(i,a,s)},e.prototype.updateChild=function(e,t){var n=le(e);if(null===n)return t;Object(o.d)(".priority"!==le(e)||1===he(e),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(de(e),t);return this.updateImmediateChild(n,r)},e.prototype.isEmpty=function(){return this.children_.isEmpty()},e.prototype.numChildren=function(){return this.children_.count()},e.prototype.val=function(t){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Qe,(function(s,a){n[s]=a.val(t),r++,o&&e.INTEGER_REGEXP_.test(s)?i=Math.max(i,Number(s)):o=!1})),!t&&o&&i<2*r){var s=[];for(var a in n)s[a]=n[a];return s}return t&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.getPriority().isEmpty()||(e+="priority:"+Be(this.getPriority().val())+":"),this.forEachChild(Qe,(function(t,n){var r=n.hash();""!==r&&(e+=":"+t+":"+r)})),this.lazyHash_=""===e?"":m(e)}return this.lazyHash_},e.prototype.getPredecessorChildName=function(e,t,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new xe(e,t));return i?i.name:null}return this.children_.getPredecessorKey(e)},e.prototype.getFirstChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.minKey();return n&&n.name}return this.children_.minKey()},e.prototype.getFirstChild=function(e){var t=this.getFirstChildName(e);return t?new xe(t,this.children_.get(t)):null},e.prototype.getLastChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.maxKey();return n&&n.name}return this.children_.maxKey()},e.prototype.getLastChild=function(e){var t=this.getLastChildName(e);return t?new xe(t,this.children_.get(t)):null},e.prototype.forEachChild=function(e,t){var n=this.resolveIndex_(e);return n?n.inorderTraversal((function(e){return t(e.name,e.node)})):this.children_.inorderTraversal(t)},e.prototype.getIterator=function(e){return this.getIteratorFrom(e.minPost(),e)},e.prototype.getIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,(function(e){return e}));for(var r=this.children_.getIteratorFrom(e.name,xe.Wrap),i=r.peek();null!=i&&t.compare(i,e)<0;)r.getNext(),i=r.peek();return r},e.prototype.getReverseIterator=function(e){return this.getReverseIteratorFrom(e.maxPost(),e)},e.prototype.getReverseIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,(function(e){return e}));for(var r=this.children_.getReverseIteratorFrom(e.name,xe.Wrap),i=r.peek();null!=i&&t.compare(i,e)>0;)r.getNext(),i=r.peek();return r},e.prototype.compareTo=function(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===et?-1:0},e.prototype.withIndex=function(t){if(t===Ne||this.indexMap_.hasIndex(t))return this;var n=this.indexMap_.addIndex(t,this.children_);return new e(this.children_,this.priorityNode_,n)},e.prototype.isIndexed=function(e){return e===Ne||this.indexMap_.hasIndex(e)},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode())return!1;var t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){for(var n=this.getIterator(Qe),r=t.getIterator(Qe),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},e.prototype.resolveIndex_=function(e){return e===Ne?null:this.indexMap_.get(e.toString())},e.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,e}(),et=new(function(e){function t(){return e.call(this,new Le(Me),Ze.EMPTY_NODE,Je.Default)||this}return Object(s.c)(t,e),t.prototype.compareTo=function(e){return e===this?0:1},t.prototype.equals=function(e){return e===this},t.prototype.getPriority=function(){return this},t.prototype.getImmediateChild=function(e){return Ze.EMPTY_NODE},t.prototype.isEmpty=function(){return!1},t}(Ze));Object.defineProperties(xe,{MIN:{value:new xe(x,Ze.EMPTY_NODE)},MAX:{value:new xe(P,et)}}),je.__EMPTY_NODE=Ze.EMPTY_NODE,He.__childrenNodeConstructor=Ze,Se=et,function(e){Ue=e}(et);function tt(e,t){if(void 0===t&&(t=null),null===e)return Ze.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),Object(o.d)(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new He(e,tt(t));if(e instanceof Array){var n=Ze.EMPTY_NODE;return L(e,(function(t,r){if(Object(o.h)(e,t)&&"."!==t.substring(0,1)){var i=tt(r);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(t,i))}})),n.updatePriority(tt(t))}var r=[],i=!1;if(L(e,(function(e,t){if("."!==e.substring(0,1)){var n=tt(t);n.isEmpty()||(i=i||!n.getPriority().isEmpty(),r.push(new xe(e,n)))}})),0===r.length)return Ze.EMPTY_NODE;var s=$e(r,Fe,(function(e){return e.name}),Me);if(i){var a=$e(r,Qe.getCompare());return new Ze(s,tt(t),new Je({".priority":a},{".priority":Qe}))}return new Ze(s,tt(t),Je.Default)}!function(e){We=e}(tt);
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var nt,rt,it=function(e){function t(t){var n=e.call(this)||this;return n.indexPath_=t,Object(o.d)(!ve(t)&&".priority"!==le(t),"Can't create PathIndex with empty path or .priority key"),n}return Object(s.c)(t,e),t.prototype.extractChild=function(e){return e.getChild(this.indexPath_)},t.prototype.isDefinedOn=function(e){return!e.getChild(this.indexPath_).isEmpty()},t.prototype.compare=function(e,t){var n=this.extractChild(e.node),r=this.extractChild(t.node),i=n.compareTo(r);return 0===i?j(e.name,t.name):i},t.prototype.makePost=function(e,t){var n=tt(e),r=Ze.EMPTY_NODE.updateChild(this.indexPath_,n);return new xe(t,r)},t.prototype.maxPost=function(){var e=Ze.EMPTY_NODE.updateChild(this.indexPath_,et);return new xe(P,e)},t.prototype.toString=function(){return fe(this.indexPath_,0).join("/")},t}(Pe),ot=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.c)(t,e),t.prototype.compare=function(e,t){var n=e.node.compareTo(t.node);return 0===n?j(e.name,t.name):n},t.prototype.isDefinedOn=function(e){return!0},t.prototype.indexedValueChanged=function(e,t){return!e.equals(t)},t.prototype.minPost=function(){return xe.MIN},t.prototype.maxPost=function(){return xe.MAX},t.prototype.makePost=function(e,t){var n=tt(e);return new xe(t,n)},t.prototype.toString=function(){return".value"},t}(Pe)),st="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",at=(nt=0,rt=[],function(e){var t,n=e===nt;nt=e;var r=new Array(8);for(t=7;t>=0;t--)r[t]=st.charAt(e%64),e=Math.floor(e/64);Object(o.d)(0===e,"Cannot push at time == 0");var i=r.join("");if(n){for(t=11;t>=0&&63===rt[t];t--)rt[t]=0;rt[t]++}else for(t=0;t<12;t++)rt[t]=Math.floor(64*Math.random());for(t=0;t<12;t++)i+=st.charAt(rt[t]);return Object(o.d)(20===i.length,"nextPushId: Length should be 20."),i}),ut=function(e){if("2147483647"===e)return"-";var t=q(e);if(null!=t)return""+(t+1);for(var n=new Array(e.length),r=0;r<n.length;r++)n[r]=e.charAt(r);if(n.length<786)return n.push("-"),n.join("");for(var i=n.length-1;i>=0&&"z"===n[i];)i--;if(-1===i)return P;var o=n[i],s=st.charAt(st.indexOf(o)+1);return n[i]=s,n.slice(0,i+1).join("")},ct=function(e){if("-2147483648"===e)return x;var t=q(e);if(null!=t)return""+(t-1);for(var n=new Array(e.length),r=0;r<n.length;r++)n[r]=e.charAt(r);return"-"===n[n.length-1]?1===n.length?"2147483647":(delete n[n.length-1],n.join("")):(n[n.length-1]=st.charAt(st.indexOf(n[n.length-1])-1),n.join("")+"z".repeat(786-n.length))};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function lt(e){return{type:"value",snapshotNode:e}}function ht(e,t){return{type:"child_added",snapshotNode:t,childName:e}}function dt(e,t){return{type:"child_removed",snapshotNode:t,childName:e}}function pt(e,t,n){return{type:"child_changed",snapshotNode:t,childName:e,oldSnap:n}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var ft=function(){function e(e){this.index_=e}return e.prototype.updateChild=function(e,t,n,r,i,s){Object(o.d)(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");var a=e.getImmediateChild(t);return a.getChild(r).equals(n.getChild(r))&&a.isEmpty()===n.isEmpty()?e:(null!=s&&(n.isEmpty()?e.hasChild(t)?s.trackChildChange(dt(t,a)):Object(o.d)(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):a.isEmpty()?s.trackChildChange(ht(t,n)):s.trackChildChange(pt(t,n,a))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))},e.prototype.updateFullNode=function(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(Qe,(function(e,r){t.hasChild(e)||n.trackChildChange(dt(e,r))})),t.isLeafNode()||t.forEachChild(Qe,(function(t,r){if(e.hasChild(t)){var i=e.getImmediateChild(t);i.equals(r)||n.trackChildChange(pt(t,r,i))}else n.trackChildChange(ht(t,r))}))),t.withIndex(this.index_)},e.prototype.updatePriority=function(e,t){return e.isEmpty()?Ze.EMPTY_NODE:e.updatePriority(t)},e.prototype.filtersNodes=function(){return!1},e.prototype.getIndexedFilter=function(){return this},e.prototype.getIndex=function(){return this.index_},e}(),_t=function(){function e(t){this.indexedFilter_=new ft(t.getIndex()),this.index_=t.getIndex(),this.startPost_=e.getStartPost_(t),this.endPost_=e.getEndPost_(t)}return e.prototype.getStartPost=function(){return this.startPost_},e.prototype.getEndPost=function(){return this.endPost_},e.prototype.matches=function(e){return this.index_.compare(this.getStartPost(),e)<=0&&this.index_.compare(e,this.getEndPost())<=0},e.prototype.updateChild=function(e,t,n,r,i,o){return this.matches(new xe(t,n))||(n=Ze.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,r,i,o)},e.prototype.updateFullNode=function(e,t,n){t.isLeafNode()&&(t=Ze.EMPTY_NODE);var r=t.withIndex(this.index_);r=r.updatePriority(Ze.EMPTY_NODE);var i=this;return t.forEachChild(Qe,(function(e,t){i.matches(new xe(e,t))||(r=r.updateImmediateChild(e,Ze.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.indexedFilter_},e.prototype.getIndex=function(){return this.index_},e.getStartPost_=function(e){if(e.hasStart()){var t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()},e.getEndPost_=function(e){if(e.hasEnd()){var t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()},e}(),yt=function(){function e(e){this.rangedFilter_=new _t(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft()}return e.prototype.updateChild=function(e,t,n,r,i,o){return this.rangedFilter_.matches(new xe(t,n))||(n=Ze.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,r,i,o):this.fullLimitUpdateChild_(e,t,n,i,o)},e.prototype.updateFullNode=function(e,t,n){var r;if(t.isLeafNode()||t.isEmpty())r=Ze.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){r=Ze.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var s=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),s)<=0:this.index_.compare(s,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(s.name,s.node),o++}}else{r=(r=t.withIndex(this.index_)).updatePriority(Ze.EMPTY_NODE);var a=void 0,u=void 0,c=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),a=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var l=this.index_.getCompare();c=function(e,t){return l(t,e)}}else i=r.getIterator(this.index_),a=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var h=!1;i.hasNext();){s=i.getNext();!h&&c(a,s)<=0&&(h=!0),h&&o<this.limit_&&c(s,u)<=0?o++:r=r.updateImmediateChild(s.name,Ze.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},e.prototype.getIndex=function(){return this.index_},e.prototype.fullLimitUpdateChild_=function(e,t,n,r,i){var s;if(this.reverse_){var a=this.index_.getCompare();s=function(e,t){return a(t,e)}}else s=this.index_.getCompare();var u=e;Object(o.d)(u.numChildren()===this.limit_,"");var c=new xe(t,n),l=this.reverse_?u.getFirstChild(this.index_):u.getLastChild(this.index_),h=this.rangedFilter_.matches(c);if(u.hasChild(t)){for(var d=u.getImmediateChild(t),p=r.getChildAfterChild(this.index_,l,this.reverse_);null!=p&&(p.name===t||u.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var f=null==p?1:s(p,c);if(h&&!n.isEmpty()&&f>=0)return null!=i&&i.trackChildChange(pt(t,n,d)),u.updateImmediateChild(t,n);null!=i&&i.trackChildChange(dt(t,d));var _=u.updateImmediateChild(t,Ze.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=i&&i.trackChildChange(ht(p.name,p.node)),_.updateImmediateChild(p.name,p.node)):_}return n.isEmpty()?e:h&&s(l,c)>=0?(null!=i&&(i.trackChildChange(dt(l.name,l.node)),i.trackChildChange(ht(t,n))),u.updateImmediateChild(t,n).updateImmediateChild(l.name,Ze.EMPTY_NODE)):e},e}(),vt=function(){function e(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.startAfterSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.endBeforeSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Qe}return e.prototype.hasStart=function(){return this.startSet_},e.prototype.hasStartAfter=function(){return this.startAfterSet_},e.prototype.hasEndBefore=function(){return this.endBeforeSet_},e.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:"l"===this.viewFrom_},e.prototype.getIndexStartValue=function(){return Object(o.d)(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},e.prototype.getIndexStartName=function(){return Object(o.d)(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:x},e.prototype.hasEnd=function(){return this.endSet_},e.prototype.getIndexEndValue=function(){return Object(o.d)(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},e.prototype.getIndexEndName=function(){return Object(o.d)(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:P},e.prototype.hasLimit=function(){return this.limitSet_},e.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},e.prototype.getLimit=function(){return Object(o.d)(this.limitSet_,"Only valid if limit has been set"),this.limit_},e.prototype.getIndex=function(){return this.index_},e.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},e.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===Qe},e.prototype.copy=function(){var t=new e;return t.limitSet_=this.limitSet_,t.limit_=this.limit_,t.startSet_=this.startSet_,t.indexStartValue_=this.indexStartValue_,t.startNameSet_=this.startNameSet_,t.indexStartName_=this.indexStartName_,t.endSet_=this.endSet_,t.indexEndValue_=this.indexEndValue_,t.endNameSet_=this.endNameSet_,t.indexEndName_=this.indexEndName_,t.index_=this.index_,t.viewFrom_=this.viewFrom_,t},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function mt(e,t,n){var r=e.copy();return r.startSet_=!0,void 0===t&&(t=null),r.indexStartValue_=t,null!=n?(r.startNameSet_=!0,r.indexStartName_=n):(r.startNameSet_=!1,r.indexStartName_=""),r}function gt(e,t,n){var r=e.copy();return r.endSet_=!0,void 0===t&&(t=null),r.indexEndValue_=t,void 0!==n?(r.endNameSet_=!0,r.indexEndName_=n):(r.endNameSet_=!1,r.indexEndName_=""),r}function bt(e,t){var n=e.copy();return n.index_=t,n}function wt(e){var t,n={};return e.isDefault()||(e.index_===Qe?t="$priority":e.index_===ot?t="$value":e.index_===Ne?t="$key":(Object(o.d)(e.index_ instanceof it,"Unrecognized index type!"),t=e.index_.toString()),n.orderBy=Object(o.C)(t),e.startSet_&&(n.startAt=Object(o.C)(e.indexStartValue_),e.startNameSet_&&(n.startAt+=","+Object(o.C)(e.indexStartName_))),e.endSet_&&(n.endAt=Object(o.C)(e.indexEndValue_),e.endNameSet_&&(n.endAt+=","+Object(o.C)(e.indexEndName_))),e.limitSet_&&(e.isViewFromLeft()?n.limitToFirst=e.limit_:n.limitToLast=e.limit_)),n}function Ct(e){var t={};if(e.startSet_&&(t.sp=e.indexStartValue_,e.startNameSet_&&(t.sn=e.indexStartName_)),e.endSet_&&(t.ep=e.indexEndValue_,e.endNameSet_&&(t.en=e.indexEndName_)),e.limitSet_){t.l=e.limit_;var n=e.viewFrom_;""===n&&(n=e.isViewFromLeft()?"l":"r"),t.vf=n}return e.index_!==Qe&&(t.i=e.index_.toString()),t}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ot=function(e){function t(t,n,r,i){var o=e.call(this)||this;return o.repoInfo_=t,o.onDataUpdate_=n,o.authTokenProvider_=r,o.appCheckTokenProvider_=i,o.log_=E("p:rest:"),o.listens_={},o}return Object(s.c)(t,e),t.prototype.reportStats=function(e){throw new Error("Method not implemented.")},t.getListenId_=function(e,t){return void 0!==t?"tag$"+t:(Object(o.d)(e._queryParams.isDefault(),"should have a tag if it's not a default query."),e._path.toString())},t.prototype.listen=function(e,n,r,i){var s=this,a=e._path.toString();this.log_("Listen called for "+a+" "+e._queryIdentifier);var u=t.getListenId_(e,r),c={};this.listens_[u]=c;var l=wt(e._queryParams);this.restRequest_(a+".json",l,(function(e,t){var n=t;(404===e&&(n=null,e=null),null===e&&s.onDataUpdate_(a,n,!1,r),Object(o.z)(s.listens_,u)===c)&&i(e?401===e?"permission_denied":"rest_error:"+e:"ok",null)}))},t.prototype.unlisten=function(e,n){var r=t.getListenId_(e,n);delete this.listens_[r]},t.prototype.get=function(e){var t=this,n=wt(e._queryParams),r=e._path.toString(),i=new o.a;return this.restRequest_(r+".json",n,(function(e,n){var o=n;404===e&&(o=null,e=null),null===e?(t.onDataUpdate_(r,o,!1,null),i.resolve(o)):i.reject(new Error(o))})),i.promise},t.prototype.refreshAuthToken=function(e){},t.prototype.restRequest_=function(e,t,n){var r=this;return void 0===t&&(t={}),t.format="export",Promise.all([this.authTokenProvider_.getToken(!1),this.appCheckTokenProvider_.getToken(!1)]).then((function(i){var a=Object(s.e)(i,2),u=a[0],c=a[1];u&&u.accessToken&&(t.auth=u.accessToken),c&&c.token&&(t.ac=c.token);var l=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+e+"?ns="+r.repoInfo_.namespace+Object(o.y)(t);r.log_("Sending REST request for "+l);var h=new XMLHttpRequest;h.onreadystatechange=function(){if(n&&4===h.readyState){r.log_("REST Response for "+l+" received. status:",h.status,"response:",h.responseText);var e=null;if(h.status>=200&&h.status<300){try{e=Object(o.w)(h.responseText)}catch(e){I("Failed to parse JSON response for "+l+": "+h.responseText)}n(null,e)}else 401!==h.status&&404!==h.status&&I("Got unsuccessful REST response for "+l+" Status: "+h.status),n(h.status);n=null}},h.open("GET",l,!0),h.send()}))},t}(oe),Et=function(){function e(){this.rootNode_=Ze.EMPTY_NODE}return e.prototype.getNode=function(e){return this.rootNode_.getChild(e)},e.prototype.updateSnapshot=function(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Tt(){return{value:null,children:new Map}}function St(e,t,n){if(ve(t))e.value=n,e.children.clear();else if(null!==e.value)e.value=e.value.updateChild(t,n);else{var r=le(t);e.children.has(r)||e.children.set(r,Tt()),St(e.children.get(r),t=de(t),n)}}function It(e,t,n){null!==e.value?n(t,e.value):function(e,t){e.children.forEach((function(e,n){t(n,e)}))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e,(function(e,r){It(r,new ue(t.toString()+"/"+e),n)}))}var kt,xt=function(){function e(e){this.collection_=e,this.last_=null}return e.prototype.get=function(){var e=this.collection_.get(),t=Object(s.a)({},e);return this.last_&&L(this.last_,(function(e,n){t[e]=t[e]-n})),this.last_=e,t},e}(),Pt=function(){function e(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new xt(e);var n=1e4+2e4*Math.random();U(this.reportStats_.bind(this),Math.floor(n))}return e.prototype.reportStats_=function(){var e=this,t=this.statsListener_.get(),n={},r=!1;L(t,(function(t,i){i>0&&Object(o.h)(e.statsToReport_,t)&&(n[t]=i,r=!0)})),r&&this.server_.reportStats(n),U(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function jt(e){return{fromUser:!1,fromServer:!0,queryId:e,tagged:!0}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(kt||(kt={}));var Nt,Rt=function(){function e(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=kt.ACK_USER_WRITE,this.source={fromUser:!0,fromServer:!1,queryId:null,tagged:!1}}return e.prototype.operationForChild=function(t){if(ve(this.path)){if(null!=this.affectedTree.value)return Object(o.d)(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new ue(t));return new e(ce(),n,this.revert)}return Object(o.d)(le(this.path)===t,"operationForChild called for unrelated child."),new e(de(this.path),this.affectedTree,this.revert)},e}(),Dt=function(){function e(e,t){this.source=e,this.path=t,this.type=kt.LISTEN_COMPLETE}return e.prototype.operationForChild=function(t){return ve(this.path)?new e(this.source,ce()):new e(this.source,de(this.path))},e}(),At=function(){function e(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=kt.OVERWRITE}return e.prototype.operationForChild=function(t){return ve(this.path)?new e(this.source,ce(),this.snap.getImmediateChild(t)):new e(this.source,de(this.path),this.snap)},e}(),Lt=function(){function e(e,t,n){this.source=e,this.path=t,this.children=n,this.type=kt.MERGE}return e.prototype.operationForChild=function(t){if(ve(this.path)){var n=this.children.subtree(new ue(t));return n.isEmpty()?null:n.value?new At(this.source,ce(),n.value):new e(this.source,ce(),n)}return Object(o.d)(le(this.path)===t,"Can't get a merge for a child not on the path of the operation"),new e(this.source,de(this.path),this.children)},e.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},e}(),Ft=function(){function e(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}return e.prototype.isFullyInitialized=function(){return this.fullyInitialized_},e.prototype.isFiltered=function(){return this.filtered_},e.prototype.isCompleteForPath=function(e){if(ve(e))return this.isFullyInitialized()&&!this.filtered_;var t=le(e);return this.isCompleteForChild(t)},e.prototype.isCompleteForChild=function(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)},e.prototype.getNode=function(){return this.node_},e}(),Mt=function(e){this.query_=e,this.index_=this.query_._queryParams.getIndex()};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function qt(e,t,n,r,i,s){var a=r.filter((function(e){return e.type===n}));a.sort((function(t,n){return function(e,t,n){if(null==t.childName||null==n.childName)throw Object(o.e)("Should only compare child_ events.");var r=new xe(t.childName,t.snapshotNode),i=new xe(n.childName,n.snapshotNode);return e.index_.compare(r,i)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e,t,n)})),a.forEach((function(n){var r=function(e,t,n){return"value"===t.type||"child_removed"===t.type||(t.prevName=n.getPredecessorChildName(t.childName,t.snapshotNode,e.index_)),t}(e,n,s);i.forEach((function(i){i.respondsTo(n.type)&&t.push(i.createEvent(r,e.query_))}))}))}function Wt(e,t){return{eventCache:e,serverCache:t}}function Ut(e,t,n,r){return Wt(new Ft(t,n,r),e.serverCache)}function Bt(e,t,n,r){return Wt(e.eventCache,new Ft(t,n,r))}function zt(e){return e.eventCache.isFullyInitialized()?e.eventCache.getNode():null}function Ht(e){return e.serverCache.isFullyInitialized()?e.serverCache.getNode():null}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Vt=function(){function e(e,t){void 0===t&&(Nt||(Nt=new Le(N)),t=Nt),this.value=e,this.children=t}return e.fromObject=function(t){var n=new e(null);return L(t,(function(e,t){n=n.set(new ue(e),t)})),n},e.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},e.prototype.findRootMostMatchingPathAndValue=function(e,t){if(null!=this.value&&t(this.value))return{path:ce(),value:this.value};if(ve(e))return null;var n=le(e),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(de(e),t);return null!=i?{path:ye(new ue(n),i.path),value:i.value}:null}return null},e.prototype.findRootMostValueAndPath=function(e){return this.findRootMostMatchingPathAndValue(e,(function(){return!0}))},e.prototype.subtree=function(t){if(ve(t))return this;var n=le(t),r=this.children.get(n);return null!==r?r.subtree(de(t)):new e(null)},e.prototype.set=function(t,n){if(ve(t))return new e(n,this.children);var r=le(t),i=(this.children.get(r)||new e(null)).set(de(t),n),o=this.children.insert(r,i);return new e(this.value,o)},e.prototype.remove=function(t){if(ve(t))return this.children.isEmpty()?new e(null):new e(null,this.children);var n=le(t),r=this.children.get(n);if(r){var i=r.remove(de(t)),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?new e(null):new e(this.value,o)}return this},e.prototype.get=function(e){if(ve(e))return this.value;var t=le(e),n=this.children.get(t);return n?n.get(de(e)):null},e.prototype.setTree=function(t,n){if(ve(t))return n;var r=le(t),i=(this.children.get(r)||new e(null)).setTree(de(t),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new e(this.value,o)},e.prototype.fold=function(e){return this.fold_(ce(),e)},e.prototype.fold_=function(e,t){var n={};return this.children.inorderTraversal((function(r,i){n[r]=i.fold_(ye(e,r),t)})),t(e,this.value,n)},e.prototype.findOnPath=function(e,t){return this.findOnPath_(e,ce(),t)},e.prototype.findOnPath_=function(e,t,n){var r=!!this.value&&n(t,this.value);if(r)return r;if(ve(e))return null;var i=le(e),o=this.children.get(i);return o?o.findOnPath_(de(e),ye(t,i),n):null},e.prototype.foreachOnPath=function(e,t){return this.foreachOnPath_(e,ce(),t)},e.prototype.foreachOnPath_=function(t,n,r){if(ve(t))return this;this.value&&r(n,this.value);var i=le(t),o=this.children.get(i);return o?o.foreachOnPath_(de(t),ye(n,i),r):new e(null)},e.prototype.foreach=function(e){this.foreach_(ce(),e)},e.prototype.foreach_=function(e,t){this.children.inorderTraversal((function(n,r){r.foreach_(ye(e,n),t)})),this.value&&t(e,this.value)},e.prototype.foreachChild=function(e){this.children.inorderTraversal((function(t,n){n.value&&e(t,n.value)}))},e}(),Yt=function(){function e(e){this.writeTree_=e}return e.empty=function(){return new e(new Vt(null))},e}();function Qt(e,t,n){if(ve(t))return new Yt(new Vt(n));var r=e.writeTree_.findRootMostValueAndPath(t);if(null!=r){var i=r.path,o=r.value,s=me(i,t);return o=o.updateChild(s,n),new Yt(e.writeTree_.set(i,o))}var a=new Vt(n),u=e.writeTree_.setTree(t,a);return new Yt(u)}function Gt(e,t,n){var r=e;return L(n,(function(e,n){r=Qt(r,ye(t,e),n)})),r}function Kt(e,t){if(ve(t))return Yt.empty();var n=e.writeTree_.setTree(t,new Vt(null));return new Yt(n)}function $t(e,t){return null!=Xt(e,t)}function Xt(e,t){var n=e.writeTree_.findRootMostValueAndPath(t);return null!=n?e.writeTree_.get(n.path).getChild(me(n.path,t)):null}function Jt(e){var t=[],n=e.writeTree_.value;return null!=n?n.isLeafNode()||n.forEachChild(Qe,(function(e,n){t.push(new xe(e,n))})):e.writeTree_.children.inorderTraversal((function(e,n){null!=n.value&&t.push(new xe(e,n.value))})),t}function Zt(e,t){if(ve(t))return e;var n=Xt(e,t);return new Yt(null!=n?new Vt(n):e.writeTree_.subtree(t))}function en(e){return e.writeTree_.isEmpty()}function tn(e,t){return function e(t,n,r){if(null!=n.value)return r.updateChild(t,n.value);var i=null;return n.children.inorderTraversal((function(n,s){".priority"===n?(Object(o.d)(null!==s.value,"Priority writes must always be leaf nodes"),i=s.value):r=e(ye(t,n),s,r)})),r.getChild(t).isEmpty()||null===i||(r=r.updateChild(ye(t,".priority"),i)),r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(ce(),e.writeTree_,t)}function nn(e,t){return yn(t,e)}function rn(e,t){var n=e.allWrites.findIndex((function(e){return e.writeId===t}));Object(o.d)(n>=0,"removeWrite called with nonexistent writeId.");var r=e.allWrites[n];e.allWrites.splice(n,1);for(var i=r.visible,s=!1,a=e.allWrites.length-1;i&&a>=0;){var u=e.allWrites[a];u.visible&&(a>=n&&on(u,r.path)?i=!1:we(r.path,u.path)&&(s=!0)),a--}if(i){if(s)return function(e){e.visibleWrites=an(e.allWrites,sn,ce()),e.allWrites.length>0?e.lastWriteId=e.allWrites[e.allWrites.length-1].writeId:e.lastWriteId=-1}(e),!0;r.snap?e.visibleWrites=Kt(e.visibleWrites,r.path):L(r.children,(function(t){e.visibleWrites=Kt(e.visibleWrites,ye(r.path,t))}));return!0}return!1}function on(e,t){if(e.snap)return we(e.path,t);for(var n in e.children)if(e.children.hasOwnProperty(n)&&we(ye(e.path,n),t))return!0;return!1}function sn(e){return e.visible}function an(e,t,n){for(var r=Yt.empty(),i=0;i<e.length;++i){var s=e[i];if(t(s)){var a=s.path,u=void 0;if(s.snap)we(n,a)?r=Qt(r,u=me(n,a),s.snap):we(a,n)&&(u=me(a,n),r=Qt(r,ce(),s.snap.getChild(u)));else{if(!s.children)throw Object(o.e)("WriteRecord should have .snap or .children");if(we(n,a))r=Gt(r,u=me(n,a),s.children);else if(we(a,n))if(ve(u=me(a,n)))r=Gt(r,ce(),s.children);else{var c=Object(o.z)(s.children,le(u));if(c){var l=c.getChild(de(u));r=Qt(r,ce(),l)}}}}}return r}function un(e,t,n,r,i){if(r||i){var o=Zt(e.visibleWrites,t);if(!i&&en(o))return n;if(i||null!=n||$t(o,ce())){return tn(an(e.allWrites,(function(e){return(e.visible||i)&&(!r||!~r.indexOf(e.writeId))&&(we(e.path,t)||we(t,e.path))}),t),n||Ze.EMPTY_NODE)}return null}var s=Xt(e.visibleWrites,t);if(null!=s)return s;var a=Zt(e.visibleWrites,t);return en(a)?n:null!=n||$t(a,ce())?tn(a,n||Ze.EMPTY_NODE):null}function cn(e,t,n,r){return un(e.writeTree,e.treePath,t,n,r)}function ln(e,t){return function(e,t,n){var r=Ze.EMPTY_NODE,i=Xt(e.visibleWrites,t);if(i)return i.isLeafNode()||i.forEachChild(Qe,(function(e,t){r=r.updateImmediateChild(e,t)})),r;if(n){var o=Zt(e.visibleWrites,t);return n.forEachChild(Qe,(function(e,t){var n=tn(Zt(o,new ue(e)),t);r=r.updateImmediateChild(e,n)})),Jt(o).forEach((function(e){r=r.updateImmediateChild(e.name,e.node)})),r}return Jt(Zt(e.visibleWrites,t)).forEach((function(e){r=r.updateImmediateChild(e.name,e.node)})),r}(e.writeTree,e.treePath,t)}function hn(e,t,n,r){return function(e,t,n,r,i){Object(o.d)(r||i,"Either existingEventSnap or existingServerSnap must exist");var s=ye(t,n);if($t(e.visibleWrites,s))return null;var a=Zt(e.visibleWrites,s);return en(a)?i.getChild(n):tn(a,i.getChild(n))}(e.writeTree,e.treePath,t,n,r)}function dn(e,t){return function(e,t){return Xt(e.visibleWrites,t)}(e.writeTree,ye(e.treePath,t))}function pn(e,t,n,r,i,o){return function(e,t,n,r,i,o,s){var a,u=Zt(e.visibleWrites,t),c=Xt(u,ce());if(null!=c)a=c;else{if(null==n)return[];a=tn(u,n)}if((a=a.withIndex(s)).isEmpty()||a.isLeafNode())return[];for(var l=[],h=s.getCompare(),d=o?a.getReverseIteratorFrom(r,s):a.getIteratorFrom(r,s),p=d.getNext();p&&l.length<i;)0!==h(p,r)&&l.push(p),p=d.getNext();return l}(e.writeTree,e.treePath,t,n,r,i,o)}function fn(e,t,n){return function(e,t,n,r){var i=ye(t,n),o=Xt(e.visibleWrites,i);return null!=o?o:r.isCompleteForChild(n)?tn(Zt(e.visibleWrites,i),r.getNode().getImmediateChild(n)):null}(e.writeTree,e.treePath,t,n)}function _n(e,t){return yn(ye(e.treePath,t),e.writeTree)}function yn(e,t){return{treePath:e,writeTree:t}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var vn=function(){function e(){this.changeMap=new Map}return e.prototype.trackChildChange=function(e){var t=e.type,n=e.childName;Object(o.d)("child_added"===t||"child_changed"===t||"child_removed"===t,"Only child changes supported for tracking"),Object(o.d)(".priority"!==n,"Only non-priority child changes can be tracked.");var r=this.changeMap.get(n);if(r){var i=r.type;if("child_added"===t&&"child_removed"===i)this.changeMap.set(n,pt(n,e.snapshotNode,r.snapshotNode));else if("child_removed"===t&&"child_added"===i)this.changeMap.delete(n);else if("child_removed"===t&&"child_changed"===i)this.changeMap.set(n,dt(n,r.oldSnap));else if("child_changed"===t&&"child_added"===i)this.changeMap.set(n,ht(n,e.snapshotNode));else{if("child_changed"!==t||"child_changed"!==i)throw Object(o.e)("Illegal combination of changes: "+e+" occurred after "+r);this.changeMap.set(n,pt(n,e.snapshotNode,r.oldSnap))}}else this.changeMap.set(n,e)},e.prototype.getChanges=function(){return Array.from(this.changeMap.values())},e}(),mn=new(function(){function e(){}return e.prototype.getCompleteChild=function(e){return null},e.prototype.getChildAfterChild=function(e,t,n){return null},e}()),gn=function(){function e(e,t,n){void 0===n&&(n=null),this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}return e.prototype.getCompleteChild=function(e){var t=this.viewCache_.eventCache;if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);var n=null!=this.optCompleteServerCache_?new Ft(this.optCompleteServerCache_,!0,!1):this.viewCache_.serverCache;return fn(this.writes_,e,n)},e.prototype.getChildAfterChild=function(e,t,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:Ht(this.viewCache_),i=pn(this.writes_,r,t,1,n,e);return 0===i.length?null:i[0]},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function bn(e,t,n,r,i){var s,a,u=new vn;if(n.type===kt.OVERWRITE){var c=n;c.source.fromUser?s=On(e,t,c.path,c.snap,r,i,u):(Object(o.d)(c.source.fromServer,"Unknown source."),a=c.source.tagged||t.serverCache.isFiltered()&&!ve(c.path),s=Cn(e,t,c.path,c.snap,r,i,a,u))}else if(n.type===kt.MERGE){var l=n;l.source.fromUser?s=function(e,t,n,r,i,o,s){var a=t;return r.foreach((function(r,u){var c=ye(n,r);En(t,le(c))&&(a=On(e,a,c,u,i,o,s))})),r.foreach((function(r,u){var c=ye(n,r);En(t,le(c))||(a=On(e,a,c,u,i,o,s))})),a}(e,t,l.path,l.children,r,i,u):(Object(o.d)(l.source.fromServer,"Unknown source."),a=l.source.tagged||t.serverCache.isFiltered(),s=Sn(e,t,l.path,l.children,r,i,a,u))}else if(n.type===kt.ACK_USER_WRITE){var h=n;s=h.revert?function(e,t,n,r,i,s){var a;if(null!=dn(r,n))return t;var u=new gn(r,t,i),c=t.eventCache.getNode(),l=void 0;if(ve(n)||".priority"===le(n)){var h=void 0;if(t.serverCache.isFullyInitialized())h=cn(r,Ht(t));else{var d=t.serverCache.getNode();Object(o.d)(d instanceof Ze,"serverChildren would be complete if leaf node"),h=ln(r,d)}h=h,l=e.filter.updateFullNode(c,h,s)}else{var p=le(n),f=fn(r,p,t.serverCache);null==f&&t.serverCache.isCompleteForChild(p)&&(f=c.getImmediateChild(p)),(l=null!=f?e.filter.updateChild(c,p,f,de(n),u,s):t.eventCache.getNode().hasChild(p)?e.filter.updateChild(c,p,Ze.EMPTY_NODE,de(n),u,s):c).isEmpty()&&t.serverCache.isFullyInitialized()&&(a=cn(r,Ht(t))).isLeafNode()&&(l=e.filter.updateFullNode(l,a,s))}return a=t.serverCache.isFullyInitialized()||null!=dn(r,ce()),Ut(t,l,a,e.filter.filtersNodes())}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e,t,h.path,r,i,u):function(e,t,n,r,i,o,s){if(null!=dn(i,n))return t;var a=t.serverCache.isFiltered(),u=t.serverCache;if(null!=r.value){if(ve(n)&&u.isFullyInitialized()||u.isCompleteForPath(n))return Cn(e,t,n,u.getNode().getChild(n),i,o,a,s);if(ve(n)){var c=new Vt(null);return u.getNode().forEachChild(Ne,(function(e,t){c=c.set(new ue(e),t)})),Sn(e,t,n,c,i,o,a,s)}return t}var l=new Vt(null);return r.foreach((function(e,t){var r=ye(n,e);u.isCompleteForPath(r)&&(l=l.set(e,u.getNode().getChild(r)))})),Sn(e,t,n,l,i,o,a,s)}(e,t,h.path,h.affectedTree,r,i,u)}else{if(n.type!==kt.LISTEN_COMPLETE)throw Object(o.e)("Unknown operation type: "+n.type);s=function(e,t,n,r,i){var o=t.serverCache,s=Bt(t,o.getNode(),o.isFullyInitialized()||ve(n),o.isFiltered());return wn(e,s,n,r,mn,i)}(e,t,n.path,r,u)}var d=u.getChanges();return function(e,t,n){var r=t.eventCache;if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=zt(e);(n.length>0||!e.eventCache.isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(lt(zt(t)))}}(t,s,d),{viewCache:s,changes:d}}function wn(e,t,n,r,i,s){var a=t.eventCache;if(null!=dn(r,n))return t;var u=void 0,c=void 0;if(ve(n))if(Object(o.d)(t.serverCache.isFullyInitialized(),"If change path is empty, we must have complete server data"),t.serverCache.isFiltered()){var l=Ht(t),h=ln(r,l instanceof Ze?l:Ze.EMPTY_NODE);u=e.filter.updateFullNode(t.eventCache.getNode(),h,s)}else{var d=cn(r,Ht(t));u=e.filter.updateFullNode(t.eventCache.getNode(),d,s)}else{var p=le(n);if(".priority"===p){Object(o.d)(1===he(n),"Can't have a priority with additional path components");var f=a.getNode(),_=hn(r,n,f,c=t.serverCache.getNode());u=null!=_?e.filter.updatePriority(f,_):a.getNode()}else{var y=de(n),v=void 0;if(a.isCompleteForChild(p)){c=t.serverCache.getNode();var m=hn(r,n,a.getNode(),c);v=null!=m?a.getNode().getImmediateChild(p).updateChild(y,m):a.getNode().getImmediateChild(p)}else v=fn(r,p,t.serverCache);u=null!=v?e.filter.updateChild(a.getNode(),p,v,y,i,s):a.getNode()}}return Ut(t,u,a.isFullyInitialized()||ve(n),e.filter.filtersNodes())}function Cn(e,t,n,r,i,o,s,a){var u,c=t.serverCache,l=s?e.filter:e.filter.getIndexedFilter();if(ve(n))u=l.updateFullNode(c.getNode(),r,null);else if(l.filtersNodes()&&!c.isFiltered()){var h=c.getNode().updateChild(n,r);u=l.updateFullNode(c.getNode(),h,null)}else{var d=le(n);if(!c.isCompleteForPath(n)&&he(n)>1)return t;var p=de(n),f=c.getNode().getImmediateChild(d).updateChild(p,r);u=".priority"===d?l.updatePriority(c.getNode(),f):l.updateChild(c.getNode(),d,f,p,mn,null)}var _=Bt(t,u,c.isFullyInitialized()||ve(n),l.filtersNodes());return wn(e,_,n,i,new gn(i,_,o),a)}function On(e,t,n,r,i,o,s){var a,u,c=t.eventCache,l=new gn(i,t,o);if(ve(n))u=e.filter.updateFullNode(t.eventCache.getNode(),r,s),a=Ut(t,u,!0,e.filter.filtersNodes());else{var h=le(n);if(".priority"===h)u=e.filter.updatePriority(t.eventCache.getNode(),r),a=Ut(t,u,c.isFullyInitialized(),c.isFiltered());else{var d=de(n),p=c.getNode().getImmediateChild(h),f=void 0;if(ve(d))f=r;else{var _=l.getCompleteChild(h);f=null!=_?".priority"===pe(d)&&_.getChild(_e(d)).isEmpty()?_:_.updateChild(d,r):Ze.EMPTY_NODE}if(p.equals(f))a=t;else a=Ut(t,e.filter.updateChild(c.getNode(),h,f,d,l,s),c.isFullyInitialized(),e.filter.filtersNodes())}}return a}function En(e,t){return e.eventCache.isCompleteForChild(t)}function Tn(e,t,n){return n.foreach((function(e,n){t=t.updateChild(e,n)})),t}function Sn(e,t,n,r,i,o,s,a){if(t.serverCache.getNode().isEmpty()&&!t.serverCache.isFullyInitialized())return t;var u,c=t;u=ve(n)?r:new Vt(null).setTree(n,r);var l=t.serverCache.getNode();return u.children.inorderTraversal((function(n,r){if(l.hasChild(n)){var u=Tn(0,t.serverCache.getNode().getImmediateChild(n),r);c=Cn(e,c,new ue(n),u,i,o,s,a)}})),u.children.inorderTraversal((function(n,r){var u=!t.serverCache.isCompleteForChild(n)&&void 0===r.value;if(!l.hasChild(n)&&!u){var h=Tn(0,t.serverCache.getNode().getImmediateChild(n),r);c=Cn(e,c,new ue(n),h,i,o,s,a)}})),c}var In,kn=function(){function e(e,t){this.query_=e,this.eventRegistrations_=[];var n,r=this.query_._queryParams,i=new ft(r.getIndex()),o=(n=r).loadsAllData()?new ft(n.getIndex()):n.hasLimit()?new yt(n):new _t(n);this.processor_=
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){return{filter:e}}(o);var s=t.serverCache,a=t.eventCache,u=i.updateFullNode(Ze.EMPTY_NODE,s.getNode(),null),c=o.updateFullNode(Ze.EMPTY_NODE,a.getNode(),null),l=new Ft(u,s.isFullyInitialized(),i.filtersNodes()),h=new Ft(c,a.isFullyInitialized(),o.filtersNodes());this.viewCache_=Wt(h,l),this.eventGenerator_=new Mt(this.query_)}return Object.defineProperty(e.prototype,"query",{get:function(){return this.query_},enumerable:!1,configurable:!0}),e}();function xn(e,t){var n=Ht(e.viewCache_);return n&&(e.query._queryParams.loadsAllData()||!ve(t)&&!n.getImmediateChild(le(t)).isEmpty())?n.getChild(t):null}function Pn(e){return 0===e.eventRegistrations_.length}function jn(e,t,n){var r=[];if(n){Object(o.d)(null==t,"A cancel should cancel all event registrations.");var i=e.query._path;e.eventRegistrations_.forEach((function(e){var t=e.createCancelEvent(n,i);t&&r.push(t)}))}if(t){for(var s=[],a=0;a<e.eventRegistrations_.length;++a){var u=e.eventRegistrations_[a];if(u.matches(t)){if(t.hasAnyCallback()){s=s.concat(e.eventRegistrations_.slice(a+1));break}}else s.push(u)}e.eventRegistrations_=s}else e.eventRegistrations_=[];return r}function Nn(e,t,n,r){t.type===kt.MERGE&&null!==t.source.queryId&&(Object(o.d)(Ht(e.viewCache_),"We should always have a full cache before handling merges"),Object(o.d)(zt(e.viewCache_),"Missing event cache, even though we have a server cache"));var i,s,a=e.viewCache_,u=bn(e.processor_,a,t,n,r);return i=e.processor_,s=u.viewCache,Object(o.d)(s.eventCache.getNode().isIndexed(i.filter.getIndex()),"Event snap not indexed"),Object(o.d)(s.serverCache.getNode().isIndexed(i.filter.getIndex()),"Server snap not indexed"),Object(o.d)(u.viewCache.serverCache.isFullyInitialized()||!a.serverCache.isFullyInitialized(),"Once a server snap is complete, it should never go back"),e.viewCache_=u.viewCache,Rn(e,u.changes,u.viewCache.eventCache.getNode(),null)}function Rn(e,t,n,r){var i=r?[r]:e.eventRegistrations_;return function(e,t,n,r){var i=[],o=[];return t.forEach((function(t){var n;"child_changed"===t.type&&e.index_.indexedValueChanged(t.oldSnap,t.snapshotNode)&&o.push((n=t.childName,{type:"child_moved",snapshotNode:t.snapshotNode,childName:n}))})),qt(e,i,"child_removed",t,r,n),qt(e,i,"child_added",t,r,n),qt(e,i,"child_moved",o,r,n),qt(e,i,"child_changed",t,r,n),qt(e,i,"value",t,r,n),i}(e.eventGenerator_,t,n,i)}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Dn,An=function(){this.views=new Map};function Ln(e,t,n,r){var i,a,u=t.source.queryId;if(null!==u){var c=e.views.get(u);return Object(o.d)(null!=c,"SyncTree gave us an op for an invalid query."),Nn(c,t,n,r)}var l=[];try{for(var h=Object(s.g)(e.views.values()),d=h.next();!d.done;d=h.next()){c=d.value;l=l.concat(Nn(c,t,n,r))}}catch(e){i={error:e}}finally{try{d&&!d.done&&(a=h.return)&&a.call(h)}finally{if(i)throw i.error}}return l}function Fn(e,t,n,r,i){var o=t._queryIdentifier,s=e.views.get(o);if(!s){var a=cn(n,i?r:null),u=!1;a?u=!0:r instanceof Ze?(a=ln(n,r),u=!1):(a=Ze.EMPTY_NODE,u=!1);var c=Wt(new Ft(a,u,!1),new Ft(r,i,!1));return new kn(t,c)}return s}function Mn(e,t,n,r,i,o){var s=Fn(e,t,r,i,o);return e.views.has(t._queryIdentifier)||e.views.set(t._queryIdentifier,s),function(e,t){e.eventRegistrations_.push(t)}(s,n),function(e,t){var n=e.viewCache_.eventCache,r=[];return n.getNode().isLeafNode()||n.getNode().forEachChild(Qe,(function(e,t){r.push(ht(e,t))})),n.isFullyInitialized()&&r.push(lt(n.getNode())),Rn(e,r,n.getNode(),t)}(s,n)}function qn(e,t,n,r){var i,a,u=t._queryIdentifier,c=[],l=[],h=Hn(e);if("default"===u)try{for(var d=Object(s.g)(e.views.entries()),p=d.next();!p.done;p=d.next()){var f=Object(s.e)(p.value,2),_=f[0],y=f[1];l=l.concat(jn(y,n,r)),Pn(y)&&(e.views.delete(_),y.query._queryParams.loadsAllData()||c.push(y.query))}}catch(e){i={error:e}}finally{try{p&&!p.done&&(a=d.return)&&a.call(d)}finally{if(i)throw i.error}}else(y=e.views.get(u))&&(l=l.concat(jn(y,n,r)),Pn(y)&&(e.views.delete(u),y.query._queryParams.loadsAllData()||c.push(y.query)));return h&&!Hn(e)&&c.push(new(Object(o.d)(In,"Reference.ts has not been loaded"),In)(t._repo,t._path)),{removed:c,events:l}}function Wn(e){var t,n,r=[];try{for(var i=Object(s.g)(e.views.values()),o=i.next();!o.done;o=i.next()){var a=o.value;a.query._queryParams.loadsAllData()||r.push(a)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}function Un(e,t){var n,r,i=null;try{for(var o=Object(s.g)(e.views.values()),a=o.next();!a.done;a=o.next()){var u=a.value;i=i||xn(u,t)}}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return i}function Bn(e,t){if(t._queryParams.loadsAllData())return Vn(e);var n=t._queryIdentifier;return e.views.get(n)}function zn(e,t){return null!=Bn(e,t)}function Hn(e){return null!=Vn(e)}function Vn(e){var t,n;try{for(var r=Object(s.g)(e.views.values()),i=r.next();!i.done;i=r.next()){var o=i.value;if(o.query._queryParams.loadsAllData())return o}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}return null}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Yn=1,Qn=function(e){this.listenProvider_=e,this.syncPointTree_=new Vt(null),this.pendingWriteTree_={visibleWrites:Yt.empty(),allWrites:[],lastWriteId:-1},this.tagToQueryMap=new Map,this.queryToTagMap=new Map};function Gn(e,t,n,r,i){return function(e,t,n,r,i){Object(o.d)(r>e.lastWriteId,"Stacking an older write on top of newer ones"),void 0===i&&(i=!0),e.allWrites.push({path:t,snap:n,writeId:r,visible:i}),i&&(e.visibleWrites=Qt(e.visibleWrites,t,n)),e.lastWriteId=r}(e.pendingWriteTree_,t,n,r,i),i?nr(e,new At({fromUser:!0,fromServer:!1,queryId:null,tagged:!1},t,n)):[]}function Kn(e,t,n,r){!function(e,t,n,r){Object(o.d)(r>e.lastWriteId,"Stacking an older merge on top of newer ones"),e.allWrites.push({path:t,children:n,writeId:r,visible:!0}),e.visibleWrites=Gt(e.visibleWrites,t,n),e.lastWriteId=r}(e.pendingWriteTree_,t,n,r);var i=Vt.fromObject(n);return nr(e,new Lt({fromUser:!0,fromServer:!1,queryId:null,tagged:!1},t,i))}function $n(e,t,n){void 0===n&&(n=!1);var r=function(e,t){for(var n=0;n<e.allWrites.length;n++){var r=e.allWrites[n];if(r.writeId===t)return r}return null}(e.pendingWriteTree_,t);if(rn(e.pendingWriteTree_,t)){var i=new Vt(null);return null!=r.snap?i=i.set(ce(),!0):L(r.children,(function(e){i=i.set(new ue(e),!0)})),nr(e,new Rt(r.path,i,n))}return[]}function Xn(e,t,n){return nr(e,new At({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t,n))}function Jn(e,t,n,r){var i=t._path,o=e.syncPointTree_.get(i),s=[];if(o&&("default"===t._queryIdentifier||zn(o,t))){var a=qn(o,t,n,r);0===o.views.size&&(e.syncPointTree_=e.syncPointTree_.remove(i));var u=a.removed;s=a.events;var c=-1!==u.findIndex((function(e){return e._queryParams.loadsAllData()})),l=e.syncPointTree_.findOnPath(i,(function(e,t){return Hn(t)}));if(c&&!l){var h=e.syncPointTree_.subtree(i);if(!h.isEmpty())for(var d=function(e){return e.fold((function(e,t,n){if(t&&Hn(t))return[Vn(t)];var r=[];return t&&(r=Wn(t)),L(n,(function(e,t){r=r.concat(t)})),r}))}(h),p=0;p<d.length;++p){var f=d[p],_=f.query,y=rr(e,f);e.listenProvider_.startListening(cr(_),ir(e,_),y.hashFn,y.onComplete)}}if(!l&&u.length>0&&!r)if(c){e.listenProvider_.stopListening(cr(t),null)}else u.forEach((function(t){var n=e.queryToTagMap.get(or(t));e.listenProvider_.stopListening(cr(t),n)}));!function(e,t){for(var n=0;n<t.length;++n){var r=t[n];if(!r._queryParams.loadsAllData()){var i=or(r),o=e.queryToTagMap.get(i);e.queryToTagMap.delete(i),e.tagToQueryMap.delete(o)}}}(e,u)}return s}function Zn(e,t,n){var r=t._path,i=null,s=!1;e.syncPointTree_.foreachOnPath(r,(function(e,t){var n=me(e,r);i=i||Un(t,n),s=s||Hn(t)}));var a,u=e.syncPointTree_.get(r);(u?(s=s||Hn(u),i=i||Un(u,ce())):(u=new An,e.syncPointTree_=e.syncPointTree_.set(r,u)),null!=i)?a=!0:(a=!1,i=Ze.EMPTY_NODE,e.syncPointTree_.subtree(r).foreachChild((function(e,t){var n=Un(t,ce());n&&(i=i.updateImmediateChild(e,n))})));var c=zn(u,t);if(!c&&!t._queryParams.loadsAllData()){var l=or(t);Object(o.d)(!e.queryToTagMap.has(l),"View does not exist, but we have a tag");var h=Yn++;e.queryToTagMap.set(l,h),e.tagToQueryMap.set(h,l)}var d=Mn(u,t,n,nn(e.pendingWriteTree_,r),i,a);if(!c&&!s){var p=Bn(u,t);d=d.concat(function(e,t,n){var r=t._path,i=ir(e,t),s=rr(e,n),a=e.listenProvider_.startListening(cr(t),i,s.hashFn,s.onComplete),u=e.syncPointTree_.subtree(r);if(i)Object(o.d)(!Hn(u.value),"If we're adding a query, it shouldn't be shadowed");else for(var c=u.fold((function(e,t,n){if(!ve(e)&&t&&Hn(t))return[Vn(t).query];var r=[];return t&&(r=r.concat(Wn(t).map((function(e){return e.query})))),L(n,(function(e,t){r=r.concat(t)})),r})),l=0;l<c.length;++l){var h=c[l];e.listenProvider_.stopListening(cr(h),ir(e,h))}return a}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e,t,p))}return d}function er(e,t,n){var r=e.pendingWriteTree_,i=e.syncPointTree_.findOnPath(t,(function(e,n){var r=Un(n,me(e,t));if(r)return r}));return un(r,t,i,n,!0)}function tr(e,t){var n=t._path,r=null;e.syncPointTree_.foreachOnPath(n,(function(e,t){var i=me(e,n);r=r||Un(t,i)}));var i=e.syncPointTree_.get(n);i?r=r||Un(i,ce()):(i=new An,e.syncPointTree_=e.syncPointTree_.set(n,i));var o=null!=r,s=o?new Ft(r,!0,!1):null;return function(e){return zt(e.viewCache_)}(Fn(i,t,nn(e.pendingWriteTree_,t._path),o?s.getNode():Ze.EMPTY_NODE,o))}function nr(e,t){return function e(t,n,r,i){if(ve(t.path))return function e(t,n,r,i){var o=n.get(ce());null==r&&null!=o&&(r=Un(o,ce()));var s=[];n.children.inorderTraversal((function(n,o){var a=r?r.getImmediateChild(n):null,u=_n(i,n),c=t.operationForChild(n);c&&(s=s.concat(e(c,o,a,u)))})),o&&(s=s.concat(Ln(o,t,i,r)));return s}(t,n,r,i);var o=n.get(ce());null==r&&null!=o&&(r=Un(o,ce()));var s=[],a=le(t.path),u=t.operationForChild(a),c=n.children.get(a);if(c&&u){var l=r?r.getImmediateChild(a):null,h=_n(i,a);s=s.concat(e(u,c,l,h))}return o&&(s=s.concat(Ln(o,t,i,r))),s}(t,e.syncPointTree_,null,nn(e.pendingWriteTree_,ce()))}function rr(e,t){var n=t.query,r=ir(e,n);return{hashFn:function(){return(function(e){return e.viewCache_.serverCache.getNode()}(t)||Ze.EMPTY_NODE).hash()},onComplete:function(t){if("ok"===t)return r?function(e,t,n){var r=sr(e,n);if(r){var i=ar(r),o=i.path,s=i.queryId,a=me(o,t);return ur(e,o,new Dt(jt(s),a))}return[]}(e,n._path,r):function(e,t){return nr(e,new Dt({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t))}(e,n._path);var i=function(e,t){var n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===e?n="Client doesn't have permission to access the desired data.":"unavailable"===e&&(n="The service is unavailable");var r=new Error(e+" at "+t._path.toString()+": "+n);return r.code=e.toUpperCase(),r}(t,n);return Jn(e,n,null,i)}}}function ir(e,t){var n=or(t);return e.queryToTagMap.get(n)}function or(e){return e._path.toString()+"$"+e._queryIdentifier}function sr(e,t){return e.tagToQueryMap.get(t)}function ar(e){var t=e.indexOf("$");return Object(o.d)(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new ue(e.substr(0,t))}}function ur(e,t,n){var r=e.syncPointTree_.get(t);return Object(o.d)(r,"Missing sync point for query tag that we're tracking"),Ln(r,n,nn(e.pendingWriteTree_,t),null)}function cr(e){return e._queryParams.loadsAllData()&&!e._queryParams.isDefault()?new(Object(o.d)(Dn,"Reference.ts has not been loaded"),Dn)(e._repo,e._path):e}var lr=function(){function e(e){this.node_=e}return e.prototype.getImmediateChild=function(t){return new e(this.node_.getImmediateChild(t))},e.prototype.node=function(){return this.node_},e}(),hr=function(){function e(e,t){this.syncTree_=e,this.path_=t}return e.prototype.getImmediateChild=function(t){var n=ye(this.path_,t);return new e(this.syncTree_,n)},e.prototype.node=function(){return er(this.syncTree_,this.path_)},e}(),dr=function(e,t,n){return e&&"object"==typeof e?(Object(o.d)(".sv"in e,"Unexpected leaf node or priority contents"),"string"==typeof e[".sv"]?pr(e[".sv"],t,n):"object"==typeof e[".sv"]?fr(e[".sv"],t):void Object(o.d)(!1,"Unexpected server value: "+JSON.stringify(e,null,2))):e},pr=function(e,t,n){switch(e){case"timestamp":return n.timestamp;default:Object(o.d)(!1,"Unexpected server value: "+e)}},fr=function(e,t,n){e.hasOwnProperty("increment")||Object(o.d)(!1,"Unexpected server value: "+JSON.stringify(e,null,2));var r=e.increment;"number"!=typeof r&&Object(o.d)(!1,"Unexpected increment value: "+r);var i=t.node();if(Object(o.d)(null!=i,"Expected ChildrenNode.EMPTY_NODE for nulls"),!i.isLeafNode())return r;var s=i.getValue();return"number"!=typeof s?r:s+r},_r=function(e,t,n,r){return vr(t,new hr(n,e),r)},yr=function(e,t,n){return vr(e,new lr(t),n)};function vr(e,t,n){var r,i=e.getPriority().val(),o=dr(i,t.getImmediateChild(".priority"),n);if(e.isLeafNode()){var s=e,a=dr(s.getValue(),t,n);return a!==s.getValue()||o!==s.getPriority().val()?new He(a,tt(o)):e}var u=e;return r=u,o!==u.getPriority().val()&&(r=r.updatePriority(new He(o))),u.forEachChild(Qe,(function(e,i){var o=vr(i,t.getImmediateChild(e),n);o!==i&&(r=r.updateImmediateChild(e,o))})),r}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var mr=function(e,t,n){void 0===e&&(e=""),void 0===t&&(t=null),void 0===n&&(n={children:{},childCount:0}),this.name=e,this.parent=t,this.node=n};function gr(e,t){for(var n=t instanceof ue?t:new ue(t),r=e,i=le(n);null!==i;){var s=Object(o.z)(r.node.children,i)||{children:{},childCount:0};r=new mr(i,r,s),i=le(n=de(n))}return r}function br(e){return e.node.value}function wr(e,t){e.node.value=t,Tr(e)}function Cr(e){return e.node.childCount>0}function Or(e,t){L(e.node.children,(function(n,r){t(new mr(n,e,r))}))}function Er(e){return new ue(null===e.parent?e.name:Er(e.parent)+"/"+e.name)}function Tr(e){null!==e.parent&&function(e,t,n){var r=function(e){return void 0===br(e)&&!Cr(e)}(n),i=Object(o.h)(e.node.children,t);r&&i?(delete e.node.children[t],e.node.childCount--,Tr(e)):r||i||(e.node.children[t]=n.node,e.node.childCount++,Tr(e))}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e.parent,e.name,e)}var Sr=/[\[\].#$\/\u0000-\u001F\u007F]/,Ir=/[\[\].#$\u0000-\u001F\u007F]/,kr=function(e){return"string"==typeof e&&0!==e.length&&!Sr.test(e)},xr=function(e){return"string"==typeof e&&0!==e.length&&!Ir.test(e)},Pr=function(e){return null===e||"string"==typeof e||"number"==typeof e&&!k(e)||e&&"object"==typeof e&&Object(o.h)(e,".sv")},jr=function(e,t,n,r){r&&void 0===t||Nr(Object(o.m)(e,"value"),t,n)},Nr=function(e,t,n){var r=n instanceof ue?new Ce(n,e):n;if(void 0===t)throw new Error(e+"contains undefined "+Ee(r));if("function"==typeof t)throw new Error(e+"contains a function "+Ee(r)+" with contents = "+t.toString());if(k(t))throw new Error(e+"contains "+t.toString()+" "+Ee(r));if("string"==typeof t&&t.length>10485760/3&&Object(o.A)(t)>10485760)throw new Error(e+"contains a string greater than 10485760 utf8 bytes "+Ee(r)+" ('"+t.substring(0,50)+"...')");if(t&&"object"==typeof t){var i=!1,s=!1;if(L(t,(function(t,n){if(".value"===t)i=!0;else if(".priority"!==t&&".sv"!==t&&(s=!0,!kr(t)))throw new Error(e+" contains an invalid key ("+t+") "+Ee(r)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');var a,u;!function(e,t){e.parts_.length>0&&(e.byteLength_+=1),e.parts_.push(t),e.byteLength_+=Object(o.A)(t),Oe(e)}(r,t),Nr(e,n,r),u=(a=r).parts_.pop(),a.byteLength_-=Object(o.A)(u),a.parts_.length>0&&(a.byteLength_-=1)})),i&&s)throw new Error(e+' contains ".value" child '+Ee(r)+" in addition to actual children.")}},Rr=function(e,t,n,r){if(!r||void 0!==t){var i=Object(o.m)(e,"values");if(!t||"object"!=typeof t||Array.isArray(t))throw new Error(i+" must be an object containing the children to replace.");var s=[];L(t,(function(e,t){var r=new ue(e);if(Nr(i,t,ye(n,r)),".priority"===pe(r)&&!Pr(t))throw new Error(i+"contains an invalid value for '"+r.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");s.push(r)})),function(e,t){var n,r;for(n=0;n<t.length;n++)for(var i=fe(r=t[n]),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!kr(i[o]))throw new Error(e+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');t.sort(ge);var s=null;for(n=0;n<t.length;n++){if(r=t[n],null!==s&&we(s,r))throw new Error(e+"contains a path "+s.toString()+" that is ancestor of another path "+r.toString());s=r}}(i,s)}},Dr=function(e,t,n){if(!n||void 0!==t){if(k(t))throw new Error(Object(o.m)(e,"priority")+"is "+t.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!Pr(t))throw new Error(Object(o.m)(e,"priority")+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},Ar=function(e,t,n){if(!n||void 0!==t)switch(t){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(Object(o.m)(e,"eventType")+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},Lr=function(e,t,n,r){if(!(r&&void 0===n||kr(n)))throw new Error(Object(o.m)(e,t)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},Fr=function(e,t,n,r){if(!(r&&void 0===n||xr(n)))throw new Error(Object(o.m)(e,t)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},Mr=function(e,t){if(".info"===le(t))throw new Error(e+" failed = Can't modify data under /.info/")},qr=function(e,t){var n=t.path.toString();if("string"!=typeof t.repoInfo.host||0===t.repoInfo.host.length||!kr(t.repoInfo.namespace)&&"localhost"!==t.repoInfo.host.split(":")[0]||0!==n.length&&!function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),xr(e)}(n))throw new Error(Object(o.m)(e,"url")+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},Wr=function(e,t,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(Object(o.m)(e,t)+"must be a boolean.")},Ur=function(){this.eventLists_=[],this.recursionDepth_=0};function Br(e,t){for(var n=null,r=0;r<t.length;r++){var i=t[r],o=i.getPath();null===n||be(o,n.path)||(e.eventLists_.push(n),n=null),null===n&&(n={events:[],path:o}),n.events.push(i)}n&&e.eventLists_.push(n)}function zr(e,t,n){Br(e,n),Vr(e,(function(e){return be(e,t)}))}function Hr(e,t,n){Br(e,n),Vr(e,(function(e){return we(e,t)||we(t,e)}))}function Vr(e,t){e.recursionDepth_++;for(var n=!0,r=0;r<e.eventLists_.length;r++){var i=e.eventLists_[r];if(i)t(i.path)?(Yr(e.eventLists_[r]),e.eventLists_[r]=null):n=!1}n&&(e.eventLists_=[]),e.recursionDepth_--}function Yr(e){for(var t=0;t<e.events.length;t++){var n=e.events[t];if(null!==n){e.events[t]=null;var r=n.getEventRunner();b&&O("event: "+n.toString()),W(r)}}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Qr=function(){function e(e,t,n,r){this.repoInfo_=e,this.forceRestClient_=t,this.authTokenProvider_=n,this.appCheckProvider_=r,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Ur,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=Tt(),this.transactionQueueTree_=new mr,this.persistentConnection_=null,this.key=this.repoInfo_.toURLString()}return e.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},e}();function Gr(e,t,n){if(e.stats_=X(e.repoInfo_),e.forceRestClient_||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)e.server_=new Ot(e.repoInfo_,(function(t,n,r,i){Xr(e,t,n,r,i)}),e.authTokenProvider_,e.appCheckProvider_),setTimeout((function(){return Jr(e,!0)}),0);else{if(null!=n){if("object"!=typeof n)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{Object(o.C)(n)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}e.persistentConnection_=new ke(e.repoInfo_,t,(function(t,n,r,i){Xr(e,t,n,r,i)}),(function(t){Jr(e,t)}),(function(t){!function(e,t){L(t,(function(t,n){Zr(e,t,n)}))}(e,t)}),e.authTokenProvider_,e.appCheckProvider_,n),e.server_=e.persistentConnection_}var r,i,s;e.authTokenProvider_.addTokenChangeListener((function(t){e.server_.refreshAuthToken(t)})),e.appCheckProvider_.addTokenChangeListener((function(t){e.server_.refreshAppCheckToken(t.token)})),e.statsReporter_=(r=e.repoInfo_,i=function(){return new Pt(e.stats_,e.server_)},s=r.toString(),$[s]||($[s]=i()),$[s]),e.infoData_=new Et,e.infoSyncTree_=new Qn({startListening:function(t,n,r,i){var o=[],s=e.infoData_.getNode(t._path);return s.isEmpty()||(o=Xn(e.infoSyncTree_,t._path,s),setTimeout((function(){i("ok")}),0)),o},stopListening:function(){}}),Zr(e,"connected",!1),e.serverSyncTree_=new Qn({startListening:function(t,n,r,i){return e.server_.listen(t,r,n,(function(n,r){var o=i(n,r);Hr(e.eventQueue_,t._path,o)})),[]},stopListening:function(t,n){e.server_.unlisten(t,n)}})}function Kr(e){var t=e.infoData_.getNode(new ue(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+t}function $r(e){return(t=(t={timestamp:Kr(e)})||{}).timestamp=t.timestamp||(new Date).getTime(),t;var t}function Xr(e,t,n,r,i){e.dataUpdateCount++;var s=new ue(t);n=e.interceptServerDataCallback_?e.interceptServerDataCallback_(t,n):n;var a=[];if(i)if(r){var u=Object(o.x)(n,(function(e){return tt(e)}));a=function(e,t,n,r){var i=sr(e,r);if(i){var o=ar(i),s=o.path,a=o.queryId,u=me(s,t),c=Vt.fromObject(n);return ur(e,s,new Lt(jt(a),u,c))}return[]}(e.serverSyncTree_,s,u,i)}else{var c=tt(n);a=function(e,t,n,r){var i=sr(e,r);if(null!=i){var o=ar(i),s=o.path,a=o.queryId,u=me(s,t);return ur(e,s,new At(jt(a),u,n))}return[]}(e.serverSyncTree_,s,c,i)}else if(r){var l=Object(o.x)(n,(function(e){return tt(e)}));a=function(e,t,n){var r=Vt.fromObject(n);return nr(e,new Lt({fromUser:!1,fromServer:!0,queryId:null,tagged:!1},t,r))}(e.serverSyncTree_,s,l)}else{var h=tt(n);a=Xn(e.serverSyncTree_,s,h)}var d=s;a.length>0&&(d=li(e,s)),Hr(e.eventQueue_,d,a)}function Jr(e,t){Zr(e,"connected",t),!1===t&&function(e){si(e,"onDisconnectEvents");var t=$r(e),n=Tt();It(e.onDisconnect_,ce(),(function(r,i){var o=_r(r,i,e.serverSyncTree_,t);St(n,r,o)}));var r=[];It(n,ce(),(function(t,n){r=r.concat(Xn(e.serverSyncTree_,t,n));var i=fi(e,t);li(e,i)})),e.onDisconnect_=Tt(),Hr(e.eventQueue_,ce(),r)}(e)}function Zr(e,t,n){var r=new ue("/.info/"+t),i=tt(n);e.infoData_.updateSnapshot(r,i);var o=Xn(e.infoSyncTree_,r,i);Hr(e.eventQueue_,r,o)}function ei(e){return e.nextWriteId_++}function ti(e,t,n,r,i){si(e,"set",{path:t.toString(),value:n,priority:r});var o=$r(e),s=tt(n,r),a=er(e.serverSyncTree_,t),u=yr(s,a,o),c=ei(e),l=Gn(e.serverSyncTree_,t,u,c,!0);Br(e.eventQueue_,l),e.server_.put(t.toString(),s.val(!0),(function(n,r){var o="ok"===n;o||I("set at "+t+" failed: "+n);var s=$n(e.serverSyncTree_,c,!o);Hr(e.eventQueue_,t,s),ai(e,i,n,r)}));var h=fi(e,t);li(e,h),Hr(e.eventQueue_,h,[])}function ni(e,t,n){e.server_.onDisconnectCancel(t.toString(),(function(r,i){"ok"===r&&function e(t,n){if(ve(n))return t.value=null,t.children.clear(),!0;if(null!==t.value){if(t.value.isLeafNode())return!1;var r=t.value;return t.value=null,r.forEachChild(Qe,(function(e,n){St(t,new ue(e),n)})),e(t,n)}if(t.children.size>0){var i=le(n);if(n=de(n),t.children.has(i))e(t.children.get(i),n)&&t.children.delete(i);return 0===t.children.size}return!0}(e.onDisconnect_,t),ai(e,n,r,i)}))}function ri(e,t,n,r){var i=tt(n);e.server_.onDisconnectPut(t.toString(),i.val(!0),(function(n,o){"ok"===n&&St(e.onDisconnect_,t,i),ai(e,r,n,o)}))}function ii(e,t,n){var r;r=".info"===le(t._path)?Jn(e.infoSyncTree_,t,n):Jn(e.serverSyncTree_,t,n),zr(e.eventQueue_,t._path,r)}function oi(e){e.persistentConnection_&&e.persistentConnection_.interrupt("repo_interrupt")}function si(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r="";e.persistentConnection_&&(r=e.persistentConnection_.id+":"),O.apply(void 0,Object(s.f)([r],Object(s.e)(t)))}function ai(e,t,n,r){t&&W((function(){if("ok"===n)t(null);else{var e=(n||"error").toUpperCase(),i=e;r&&(i+=": "+r);var o=new Error(i);o.code=e,t(o)}}))}function ui(e,t,n){return er(e.serverSyncTree_,t,n)||Ze.EMPTY_NODE}function ci(e,t){if(void 0===t&&(t=e.transactionQueueTree_),t||pi(e,t),br(t)){var n=di(e,t);Object(o.d)(n.length>0,"Sending zero length transaction queue"),n.every((function(e){return 0===e.status}))&&function(e,t,n){for(var r=n.map((function(e){return e.currentWriteId})),i=ui(e,t,r),s=i,a=i.hash(),u=0;u<n.length;u++){var c=n[u];Object(o.d)(0===c.status,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=1,c.retryCount++;var l=me(t,c.path);s=s.updateChild(l,c.currentOutputSnapshotRaw)}var h=s.val(!0),d=t;e.server_.put(d.toString(),h,(function(r){si(e,"transaction put response",{path:d.toString(),status:r});var i=[];if("ok"===r){for(var o=[],s=function(t){n[t].status=2,i=i.concat($n(e.serverSyncTree_,n[t].currentWriteId)),n[t].onComplete&&o.push((function(){return n[t].onComplete(null,!0,n[t].currentOutputSnapshotResolved)})),n[t].unwatcher()},a=0;a<n.length;a++)s(a);pi(e,gr(e.transactionQueueTree_,t)),ci(e,e.transactionQueueTree_),Hr(e.eventQueue_,t,i);for(a=0;a<o.length;a++)W(o[a])}else{if("datastale"===r)for(a=0;a<n.length;a++)3===n[a].status?n[a].status=4:n[a].status=0;else{I("transaction at "+d.toString()+" failed: "+r);for(a=0;a<n.length;a++)n[a].status=4,n[a].abortReason=r}li(e,t)}}),a)}(e,Er(t),n)}else Cr(t)&&Or(t,(function(t){ci(e,t)}))}function li(e,t){var n=hi(e,t),r=Er(n);return function(e,t,n){if(0===t.length)return;for(var r=[],i=[],s=t.filter((function(e){return 0===e.status})).map((function(e){return e.currentWriteId})),a=function(a){var u,c,l=t[a],h=me(n,l.path),d=!1;if(Object(o.d)(null!==h,"rerunTransactionsUnderNode_: relativePath should not be null."),4===l.status)d=!0,u=l.abortReason,i=i.concat($n(e.serverSyncTree_,l.currentWriteId,!0));else if(0===l.status)if(l.retryCount>=25)d=!0,u="maxretry",i=i.concat($n(e.serverSyncTree_,l.currentWriteId,!0));else{var p=ui(e,l.path,s);l.currentInputSnapshot=p;var f=t[a].update(p.val());if(void 0!==f){Nr("transaction failed: Data returned ",f,l.path);var _=tt(f);"object"==typeof f&&null!=f&&Object(o.h)(f,".priority")||(_=_.updatePriority(p.getPriority()));var y=l.currentWriteId,v=$r(e),m=yr(_,p,v);l.currentOutputSnapshotRaw=_,l.currentOutputSnapshotResolved=m,l.currentWriteId=ei(e),s.splice(s.indexOf(y),1),i=(i=i.concat(Gn(e.serverSyncTree_,l.path,m,l.currentWriteId,l.applyLocally))).concat($n(e.serverSyncTree_,y,!0))}else d=!0,u="nodata",i=i.concat($n(e.serverSyncTree_,l.currentWriteId,!0))}Hr(e.eventQueue_,n,i),i=[],d&&(t[a].status=2,c=t[a].unwatcher,setTimeout(c,Math.floor(0)),t[a].onComplete&&("nodata"===u?r.push((function(){return t[a].onComplete(null,!1,t[a].currentInputSnapshot)})):r.push((function(){return t[a].onComplete(new Error(u),!1,null)}))))},u=0;u<t.length;u++)a(u);pi(e,e.transactionQueueTree_);for(u=0;u<r.length;u++)W(r[u]);ci(e,e.transactionQueueTree_)}(e,di(e,n),r),r}function hi(e,t){var n,r=e.transactionQueueTree_;for(n=le(t);null!==n&&void 0===br(r);)r=gr(r,n),n=le(t=de(t));return r}function di(e,t){var n=[];return function e(t,n,r){var i=br(n);if(i)for(var o=0;o<i.length;o++)r.push(i[o]);Or(n,(function(n){e(t,n,r)}))}(e,t,n),n.sort((function(e,t){return e.order-t.order})),n}function pi(e,t){var n=br(t);if(n){for(var r=0,i=0;i<n.length;i++)2!==n[i].status&&(n[r]=n[i],r++);n.length=r,wr(t,n.length>0?n:void 0)}Or(t,(function(t){pi(e,t)}))}function fi(e,t){var n=Er(hi(e,t)),r=gr(e.transactionQueueTree_,t);return function(e,t,n){for(var r=n?e:e.parent;null!==r;){if(t(r))return!0;r=r.parent}}(r,(function(t){_i(e,t)})),_i(e,r),function e(t,n,r,i){r&&!i&&n(t),Or(t,(function(t){e(t,n,!0,i)})),r&&i&&n(t)}(r,(function(t){_i(e,t)})),n}function _i(e,t){var n=br(t);if(n){for(var r=[],i=[],s=-1,a=0;a<n.length;a++)3===n[a].status||(1===n[a].status?(Object(o.d)(s===a-1,"All SENT items should be at beginning of queue."),s=a,n[a].status=3,n[a].abortReason="set"):(Object(o.d)(0===n[a].status,"Unexpected transaction status in abort"),n[a].unwatcher(),i=i.concat($n(e.serverSyncTree_,n[a].currentWriteId,!0)),n[a].onComplete&&r.push(n[a].onComplete.bind(null,new Error("set"),!1,null))));-1===s?wr(t,void 0):n.length=s+1,Hr(e.eventQueue_,Er(t),i);for(a=0;a<r.length;a++)W(r[a])}}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var yi=function(e,t){var n=vi(e),r=n.namespace;"firebase.com"===n.domain&&S(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),r&&"undefined"!==r||"localhost"===n.domain||S("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&I("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var i="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new Y(n.host,n.secure,r,t,i,"",r!==n.subdomain),path:new ue(n.pathString)}},vi=function(e){var t="",n="",r="",i="",o="",a=!0,u="https",c=443;if("string"==typeof e){var l=e.indexOf("//");l>=0&&(u=e.substring(0,l-1),e=e.substring(l+2));var h=e.indexOf("/");-1===h&&(h=e.length);var d=e.indexOf("?");-1===d&&(d=e.length),t=e.substring(0,Math.min(h,d)),h<d&&(i=function(e){for(var t="",n=e.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(e){}t+="/"+i}return t}(e.substring(h,d)));var p=function(e){var t,n,r={};"?"===e.charAt(0)&&(e=e.substring(1));try{for(var i=Object(s.g)(e.split("&")),o=i.next();!o.done;o=i.next()){var a=o.value;if(0!==a.length){var u=a.split("=");2===u.length?r[decodeURIComponent(u[0])]=decodeURIComponent(u[1]):I("Invalid query segment '"+a+"' in query '"+e+"'")}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}(e.substring(Math.min(e.length,d)));(l=t.indexOf(":"))>=0?(a="https"===u||"wss"===u,c=parseInt(t.substring(l+1),10)):l=t.length;var f=t.slice(0,l);if("localhost"===f.toLowerCase())n="localhost";else if(f.split(".").length<=2)n=f;else{var _=t.indexOf(".");r=t.substring(0,_).toLowerCase(),n=t.substring(_+1),o=r}"ns"in p&&(o=p.ns)}return{host:t,port:c,domain:n,subdomain:r,secure:a,scheme:u,pathString:i,namespace:o}},mi=function(){function e(e,t,n,r){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=r}return e.prototype.getPath=function(){var e=this.snapshot.ref;return"value"===this.eventType?e._path:e.parent._path},e.prototype.getEventType=function(){return this.eventType},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+Object(o.C)(this.snapshot.exportVal())},e}(),gi=function(){function e(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}return e.prototype.getPath=function(){return this.path},e.prototype.getEventType=function(){return"cancel"},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.path.toString()+":cancel"},e}(),bi=function(){function e(e,t){this.snapshotCallback=e,this.cancelCallback=t}return e.prototype.onValue=function(e,t){this.snapshotCallback.call(null,e,t)},e.prototype.onCancel=function(e){return Object(o.d)(this.hasCancelCallback,"Raising a cancel event on a listener with no cancel callback"),this.cancelCallback.call(null,e)},Object.defineProperty(e.prototype,"hasCancelCallback",{get:function(){return!!this.cancelCallback},enumerable:!1,configurable:!0}),e.prototype.matches=function(e){return this.snapshotCallback===e.snapshotCallback||this.snapshotCallback.userCallback===e.snapshotCallback.userCallback&&this.snapshotCallback.context===e.snapshotCallback.context},e}(),wi=function(){function e(e,t){this._repo=e,this._path=t}return e.prototype.cancel=function(){var e=new o.a;return ni(this._repo,this._path,e.wrapCallback((function(){}))),e.promise},e.prototype.remove=function(){Mr("OnDisconnect.remove",this._path);var e=new o.a;return ri(this._repo,this._path,null,e.wrapCallback((function(){}))),e.promise},e.prototype.set=function(e){Mr("OnDisconnect.set",this._path),jr("OnDisconnect.set",e,this._path,!1);var t=new o.a;return ri(this._repo,this._path,e,t.wrapCallback((function(){}))),t.promise},e.prototype.setWithPriority=function(e,t){Mr("OnDisconnect.setWithPriority",this._path),jr("OnDisconnect.setWithPriority",e,this._path,!1),Dr("OnDisconnect.setWithPriority",t,!1);var n=new o.a;return function(e,t,n,r,i){var o=tt(n,r);e.server_.onDisconnectPut(t.toString(),o.val(!0),(function(n,r){"ok"===n&&St(e.onDisconnect_,t,o),ai(e,i,n,r)}))}(this._repo,this._path,e,t,n.wrapCallback((function(){}))),n.promise},e.prototype.update=function(e){Mr("OnDisconnect.update",this._path),Rr("OnDisconnect.update",e,this._path,!1);var t=new o.a;return function(e,t,n,r){if(Object(o.q)(n))return O("onDisconnect().update() called with empty data.  Don't do anything."),void ai(e,r,"ok",void 0);e.server_.onDisconnectMerge(t.toString(),n,(function(i,o){"ok"===i&&L(n,(function(n,r){var i=tt(r);St(e.onDisconnect_,ye(t,n),i)})),ai(e,r,i,o)}))}(this._repo,this._path,e,t.wrapCallback((function(){}))),t.promise},e}(),Ci=function(){function e(e,t,n,r){this._repo=e,this._path=t,this._queryParams=n,this._orderByCalled=r}return Object.defineProperty(e.prototype,"key",{get:function(){return ve(this._path)?null:pe(this._path)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"ref",{get:function(){return new Si(this._repo,this._path)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"_queryIdentifier",{get:function(){var e=Ct(this._queryParams),t=D(e);return"{}"===t?"default":t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"_queryObject",{get:function(){return Ct(this._queryParams)},enumerable:!1,configurable:!0}),e.prototype.isEqual=function(t){if(!((t=Object(o.n)(t))instanceof e))return!1;var n=this._repo===t._repo,r=be(this._path,t._path),i=this._queryIdentifier===t._queryIdentifier;return n&&r&&i},e.prototype.toJSON=function(){return this.toString()},e.prototype.toString=function(){return this._repo.toString()+function(e){for(var t="",n=e.pieceNum_;n<e.pieces_.length;n++)""!==e.pieces_[n]&&(t+="/"+encodeURIComponent(String(e.pieces_[n])));return t||"/"}(this._path)},e}();function Oi(e,t){if(!0===e._orderByCalled)throw new Error(t+": You can't combine multiple orderBy calls.")}function Ei(e){var t=null,n=null;if(e.hasStart()&&(t=e.getIndexStartValue()),e.hasEnd()&&(n=e.getIndexEndValue()),e.getIndex()===Ne){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() must be a string.";if(e.hasStart()){if(e.getIndexStartName()!==x)throw new Error(r);if("string"!=typeof t)throw new Error(i)}if(e.hasEnd()){if(e.getIndexEndName()!==P)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(e.getIndex()===Qe){if(null!=t&&!Pr(t)||null!=n&&!Pr(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(Object(o.d)(e.getIndex()instanceof it||e.getIndex()===ot,"unknown index type."),null!=t&&"object"==typeof t||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() cannot be an object.")}function Ti(e){if(e.hasStart()&&e.hasEnd()&&e.hasLimit()&&!e.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use limitToFirst() or limitToLast() instead.")}var Si=function(e){function t(t,n){return e.call(this,t,n,new vt,!1)||this}return Object(s.c)(t,e),Object.defineProperty(t.prototype,"parent",{get:function(){var e=_e(this._path);return null===e?null:new t(this._repo,e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){for(var e=this;null!==e.parent;)e=e.parent;return e},enumerable:!1,configurable:!0}),t}(Ci),Ii=function(){function e(e,t,n){this._node=e,this.ref=t,this._index=n}return Object.defineProperty(e.prototype,"priority",{get:function(){return this._node.getPriority().val()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"key",{get:function(){return this.ref.key},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"size",{get:function(){return this._node.numChildren()},enumerable:!1,configurable:!0}),e.prototype.child=function(t){var n=new ue(t),r=Pi(this.ref,t);return new e(this._node.getChild(n),r,Qe)},e.prototype.exists=function(){return!this._node.isEmpty()},e.prototype.exportVal=function(){return this._node.val(!0)},e.prototype.forEach=function(t){var n=this;return!this._node.isLeafNode()&&!!this._node.forEachChild(this._index,(function(r,i){return t(new e(i,Pi(n.ref,r),Qe))}))},e.prototype.hasChild=function(e){var t=new ue(e);return!this._node.getChild(t).isEmpty()},e.prototype.hasChildren=function(){return!this._node.isLeafNode()&&!this._node.isEmpty()},e.prototype.toJSON=function(){return this.exportVal()},e.prototype.val=function(){return this._node.val()},e}();function ki(e,t){return(e=Object(o.n)(e))._checkNotDeleted("ref"),void 0!==t?Pi(e._root,t):e._root}function xi(e,t){(e=Object(o.n)(e))._checkNotDeleted("refFromURL");var n=yi(t,e._repo.repoInfo_.nodeAdmin);qr("refFromURL",n);var r=n.repoInfo;return e._repo.repoInfo_.isCustomHost()||r.host===e._repo.repoInfo_.host||S("refFromURL: Host name does not match the current database: (found "+r.host+" but expected "+e._repo.repoInfo_.host+")"),ki(e,n.path.toString())}function Pi(e,t){var n,r,i,s;return null===le((e=Object(o.n)(e))._path)?(n="child",r="path",s=!1,(i=t)&&(i=i.replace(/^\/*\.info(\/|$)/,"/")),Fr(n,r,i,s)):Fr("child","path",t,!1),new Si(e._repo,ye(e._path,t))}function ji(e,t){e=Object(o.n)(e),Mr("push",e._path),jr("push",t,e._path,!0);var n,r=Kr(e._repo),i=at(r),s=Pi(e,i),a=Pi(e,i);return n=null!=t?Ri(a,t).then((function(){return a})):Promise.resolve(a),s.then=n.then.bind(n),s.catch=n.then.bind(n,void 0),s}function Ni(e){return Mr("remove",e._path),Ri(e,null)}function Ri(e,t){e=Object(o.n)(e),Mr("set",e._path),jr("set",t,e._path,!1);var n=new o.a;return ti(e._repo,e._path,t,null,n.wrapCallback((function(){}))),n.promise}function Di(e,t){e=Object(o.n)(e),Mr("setPriority",e._path),Dr("setPriority",t,!1);var n=new o.a;return ti(e._repo,ye(e._path,".priority"),t,null,n.wrapCallback((function(){}))),n.promise}function Ai(e,t,n){if(Mr("setWithPriority",e._path),jr("setWithPriority",t,e._path,!1),Dr("setWithPriority",n,!1),".length"===e.key||".keys"===e.key)throw"setWithPriority failed: "+e.key+" is a read-only object.";var r=new o.a;return ti(e._repo,e._path,t,n,r.wrapCallback((function(){}))),r.promise}function Li(e,t){Rr("update",t,e._path,!1);var n=new o.a;return function(e,t,n,r){si(e,"update",{path:t.toString(),value:n});var i=!0,o=$r(e),s={};if(L(n,(function(n,r){i=!1,s[n]=_r(ye(t,n),tt(r),e.serverSyncTree_,o)})),i)O("update() called with empty data.  Don't do anything."),ai(e,r,"ok",void 0);else{var a=ei(e),u=Kn(e.serverSyncTree_,t,s,a);Br(e.eventQueue_,u),e.server_.merge(t.toString(),n,(function(n,i){var o="ok"===n;o||I("update at "+t+" failed: "+n);var s=$n(e.serverSyncTree_,a,!o),u=s.length>0?li(e,t):t;Hr(e.eventQueue_,u,s),ai(e,r,n,i)})),L(n,(function(n){var r=fi(e,ye(t,n));li(e,r)})),Hr(e.eventQueue_,t,[])}}(e._repo,e._path,t,n.wrapCallback((function(){}))),n.promise}function Fi(e){return function(e,t){var n=tr(e.serverSyncTree_,t);return null!=n?Promise.resolve(n):e.server_.get(t).then((function(n){var r=tt(n),i=Xn(e.serverSyncTree_,t._path,r);return zr(e.eventQueue_,t._path,i),Promise.resolve(r)}),(function(n){return si(e,"get for query "+Object(o.C)(t)+" failed: "+n),Promise.reject(new Error(n))}))}((e=Object(o.n)(e))._repo,e).then((function(t){return new Ii(t,new Si(e._repo,e._path),e._queryParams.getIndex())}))}var Mi=function(){function e(e){this.callbackContext=e}return e.prototype.respondsTo=function(e){return"value"===e},e.prototype.createEvent=function(e,t){var n=t._queryParams.getIndex();return new mi("value",this,new Ii(e.snapshotNode,new Si(t._repo,t._path),n))},e.prototype.getEventRunner=function(e){var t=this;return"cancel"===e.getEventType()?function(){return t.callbackContext.onCancel(e.error)}:function(){return t.callbackContext.onValue(e.snapshot,null)}},e.prototype.createCancelEvent=function(e,t){return this.callbackContext.hasCancelCallback?new gi(this,e,t):null},e.prototype.matches=function(t){return t instanceof e&&(!t.callbackContext||!this.callbackContext||t.callbackContext.matches(this.callbackContext))},e.prototype.hasAnyCallback=function(){return null!==this.callbackContext},e}(),qi=function(){function e(e,t){this.eventType=e,this.callbackContext=t}return e.prototype.respondsTo=function(e){var t="children_added"===e?"child_added":e;return t="children_removed"===t?"child_removed":t,this.eventType===t},e.prototype.createCancelEvent=function(e,t){return this.callbackContext.hasCancelCallback?new gi(this,e,t):null},e.prototype.createEvent=function(e,t){Object(o.d)(null!=e.childName,"Child events should have a childName.");var n=Pi(new Si(t._repo,t._path),e.childName),r=t._queryParams.getIndex();return new mi(e.type,this,new Ii(e.snapshotNode,n,r),e.prevName)},e.prototype.getEventRunner=function(e){var t=this;return"cancel"===e.getEventType()?function(){return t.callbackContext.onCancel(e.error)}:function(){return t.callbackContext.onValue(e.snapshot,e.prevName)}},e.prototype.matches=function(t){return t instanceof e&&(this.eventType===t.eventType&&(!this.callbackContext||!t.callbackContext||this.callbackContext.matches(t.callbackContext)))},e.prototype.hasAnyCallback=function(){return!!this.callbackContext},e}();function Wi(e,t,n,r,i){var o;if("object"==typeof r&&(o=void 0,i=r),"function"==typeof r&&(o=r),i&&i.onlyOnce){var s=n,a=function(t,n){ii(e._repo,e,c),s(t,n)};a.userCallback=n.userCallback,a.context=n.context,n=a}var u=new bi(n,o||void 0),c="value"===t?new Mi(u):new qi(t,u);return function(e,t,n){var r;r=".info"===le(t._path)?Zn(e.infoSyncTree_,t,n):Zn(e.serverSyncTree_,t,n),zr(e.eventQueue_,t._path,r)}(e._repo,e,c),function(){return ii(e._repo,e,c)}}function Ui(e,t,n,r){return Wi(e,"value",t,n,r)}function Bi(e,t,n,r){return Wi(e,"child_added",t,n,r)}function zi(e,t,n,r){return Wi(e,"child_changed",t,n,r)}function Hi(e,t,n,r){return Wi(e,"child_moved",t,n,r)}function Vi(e,t,n,r){return Wi(e,"child_removed",t,n,r)}function Yi(e,t,n){var r=null,i=n?new bi(n):null;"value"===t?r=new Mi(i):t&&(r=new qi(t,i)),ii(e._repo,e,r)}var Qi=function(){},Gi=function(e){function t(t,n){var r=e.call(this)||this;return r._value=t,r._key=n,r}return Object(s.c)(t,e),t.prototype._apply=function(e){jr("endAt",this._value,e._path,!0);var t=gt(e._queryParams,this._value,this._key);if(Ti(t),Ei(t),e._queryParams.hasEnd())throw new Error("endAt: Starting point was already set (by another call to endAt, endBefore or equalTo).");return new Ci(e._repo,e._path,t,e._orderByCalled)},t}(Qi);function Ki(e,t){return Lr("endAt","key",t,!0),new Gi(e,t)}var $i=function(e){function t(t,n){var r=e.call(this)||this;return r._value=t,r._key=n,r}return Object(s.c)(t,e),t.prototype._apply=function(e){jr("endBefore",this._value,e._path,!1);var t,n,r,i,o=(t=e._queryParams,n=this._value,r=this._key,t.index_===Ne?("string"==typeof n&&(n=ct(n)),i=gt(t,n,r)):i=gt(t,n,null==r?x:ct(r)),i.endBeforeSet_=!0,i);if(Ti(o),Ei(o),e._queryParams.hasEnd())throw new Error("endBefore: Starting point was already set (by another call to endAt, endBefore or equalTo).");return new Ci(e._repo,e._path,o,e._orderByCalled)},t}(Qi);function Xi(e,t){return Lr("endBefore","key",t,!0),new $i(e,t)}var Ji=function(e){function t(t,n){var r=e.call(this)||this;return r._value=t,r._key=n,r}return Object(s.c)(t,e),t.prototype._apply=function(e){jr("startAt",this._value,e._path,!0);var t=mt(e._queryParams,this._value,this._key);if(Ti(t),Ei(t),e._queryParams.hasStart())throw new Error("startAt: Starting point was already set (by another call to startAt, startBefore or equalTo).");return new Ci(e._repo,e._path,t,e._orderByCalled)},t}(Qi);function Zi(e,t){return void 0===e&&(e=null),Lr("startAt","key",t,!0),new Ji(e,t)}var eo=function(e){function t(t,n){var r=e.call(this)||this;return r._value=t,r._key=n,r}return Object(s.c)(t,e),t.prototype._apply=function(e){jr("startAfter",this._value,e._path,!1);var t=function(e,t,n){var r;if(e.index_===Ne)"string"==typeof t&&(t=ut(t)),r=mt(e,t,n);else{r=mt(e,t,null==n?P:ut(n))}return r.startAfterSet_=!0,r}(e._queryParams,this._value,this._key);if(Ti(t),Ei(t),e._queryParams.hasStart())throw new Error("startAfter: Starting point was already set (by another call to startAt, startAfter, or equalTo).");return new Ci(e._repo,e._path,t,e._orderByCalled)},t}(Qi);function to(e,t){return Lr("startAfter","key",t,!0),new eo(e,t)}var no=function(e){function t(t){var n=e.call(this)||this;return n._limit=t,n}return Object(s.c)(t,e),t.prototype._apply=function(e){if(e._queryParams.hasLimit())throw new Error("limitToFirst: Limit was already set (by another call to limitToFirst or limitToLast).");return new Ci(e._repo,e._path,(t=e._queryParams,n=this._limit,(r=t.copy()).limitSet_=!0,r.limit_=n,r.viewFrom_="l",r),e._orderByCalled);var t,n,r},t}(Qi);function ro(e){if("number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("limitToFirst: First argument must be a positive integer.");return new no(e)}var io=function(e){function t(t){var n=e.call(this)||this;return n._limit=t,n}return Object(s.c)(t,e),t.prototype._apply=function(e){if(e._queryParams.hasLimit())throw new Error("limitToLast: Limit was already set (by another call to limitToFirst or limitToLast).");return new Ci(e._repo,e._path,(t=e._queryParams,n=this._limit,(r=t.copy()).limitSet_=!0,r.limit_=n,r.viewFrom_="r",r),e._orderByCalled);var t,n,r},t}(Qi);function oo(e){if("number"!=typeof e||Math.floor(e)!==e||e<=0)throw new Error("limitToLast: First argument must be a positive integer.");return new io(e)}var so=function(e){function t(t){var n=e.call(this)||this;return n._path=t,n}return Object(s.c)(t,e),t.prototype._apply=function(e){Oi(e,"orderByChild");var t=new ue(this._path);if(ve(t))throw new Error("orderByChild: cannot pass in empty path. Use orderByValue() instead.");var n=new it(t),r=bt(e._queryParams,n);return Ei(r),new Ci(e._repo,e._path,r,!0)},t}(Qi);function ao(e){if("$key"===e)throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');if("$priority"===e)throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');if("$value"===e)throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');return Fr("orderByChild","path",e,!1),new so(e)}var uo=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.c)(t,e),t.prototype._apply=function(e){Oi(e,"orderByKey");var t=bt(e._queryParams,Ne);return Ei(t),new Ci(e._repo,e._path,t,!0)},t}(Qi);function co(){return new uo}var lo=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.c)(t,e),t.prototype._apply=function(e){Oi(e,"orderByPriority");var t=bt(e._queryParams,Qe);return Ei(t),new Ci(e._repo,e._path,t,!0)},t}(Qi);function ho(){return new lo}var po=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(s.c)(t,e),t.prototype._apply=function(e){Oi(e,"orderByValue");var t=bt(e._queryParams,ot);return Ei(t),new Ci(e._repo,e._path,t,!0)},t}(Qi);function fo(){return new po}var _o=function(e){function t(t,n){var r=e.call(this)||this;return r._value=t,r._key=n,r}return Object(s.c)(t,e),t.prototype._apply=function(e){if(jr("equalTo",this._value,e._path,!1),e._queryParams.hasStart())throw new Error("equalTo: Starting point was already set (by another call to startAt/startAfter or equalTo).");if(e._queryParams.hasEnd())throw new Error("equalTo: Ending point was already set (by another call to endAt/endBefore or equalTo).");return new Gi(this._value,this._key)._apply(new Ji(this._value,this._key)._apply(e))},t}(Qi);function yo(e,t){return Lr("equalTo","key",t,!0),new _o(e,t)}function vo(e){for(var t,n,r=[],i=1;i<arguments.length;i++)r[i-1]=arguments[i];var a=Object(o.n)(e);try{for(var u=Object(s.g)(r),c=u.next();!c.done;c=u.next()){var l=c.value;a=l._apply(a)}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return a}!function(e){Object(o.d)(!In,"__referenceConstructor has already been defined"),In=e}(Si),function(e){Object(o.d)(!Dn,"__referenceConstructor has already been defined"),Dn=e}(Si);
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var mo={},go=!1;function bo(t,n,r,i,o){var s=i||t.options.databaseURL;void 0===s&&(t.options.projectId||S("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp()."),O("Using default host for project ",t.options.projectId),s=t.options.projectId+"-default-rtdb.firebaseio.com");var a,u=yi(s,o),c=u.repoInfo,l=void 0;void 0!==e&&(l=e.env.FIREBASE_DATABASE_EMULATOR_HOST),l?(a=!0,s="http://"+l+"?ns="+c.namespace,c=(u=yi(s,o)).repoInfo):a=!u.repoInfo.secure;var h=o&&a?new H(H.OWNER):new z(t.name,t.options,n);qr("Invalid Firebase Database URL",u),ve(u.path)||S("Database URL must point to the root of a Firebase Database (not including a child path).");var d=function(e,t,n,r){var i=mo[t.name];i||(i={},mo[t.name]=i);var o=i[e.toURLString()];o&&S("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.");return o=new Qr(e,go,n,r),i[e.toURLString()]=o,o}(c,t,h,new B(t.name,r));return new wo(d,t)}var wo=function(){function e(e,t){this._repoInternal=e,this.app=t,this.type="database",this._instanceStarted=!1}return Object.defineProperty(e.prototype,"_repo",{get:function(){return this._instanceStarted||(Gr(this._repoInternal,this.app.options.appId,this.app.options.databaseAuthVariableOverride),this._instanceStarted=!0),this._repoInternal},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"_root",{get:function(){return this._rootInternal||(this._rootInternal=new Si(this._repo,ce())),this._rootInternal},enumerable:!1,configurable:!0}),e.prototype._delete=function(){var e,t,n;return this._checkNotDeleted("delete"),e=this._repo,t=this.app.name,(n=mo[t])&&n[e.key]===e||S("Database "+t+"("+e.repoInfo_+") has already been deleted."),oi(e),delete n[e.key],this._repoInternal=null,this._rootInternal=null,Promise.resolve()},e.prototype._checkNotDeleted=function(e){null===this._rootInternal&&S("Cannot call "+e+" on a deleted database.")},e}();function Co(e,t,n,r){void 0===r&&(r={}),(e=Object(o.n)(e))._checkNotDeleted("useEmulator"),e._instanceStarted&&S("Cannot call useEmulator() after instance has already been initialized.");var i=e._repoInternal,s=void 0;if(i.repoInfo_.nodeAdmin)r.mockUserToken&&S('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".'),s=new H(H.OWNER);else if(r.mockUserToken){var a=Object(o.i)(r.mockUserToken,e.app.options.projectId);s=new H(a)}!function(e,t,n,r){e.repoInfo_=new Y(t+":"+n,!1,e.repoInfo_.namespace,e.repoInfo_.webSocketOnly,e.repoInfo_.nodeAdmin,e.repoInfo_.persistenceKey,e.repoInfo_.includeNamespaceInQueryParams),r&&(e.authTokenProvider_=r)}(i,t,n,s)}function Oo(e){(e=Object(o.n)(e))._checkNotDeleted("goOffline"),oi(e._repo)}function Eo(e){var t;(e=Object(o.n)(e))._checkNotDeleted("goOnline"),(t=e._repo).persistentConnection_&&t.persistentConnection_.resume("repo_interrupt")}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var To={".sv":"timestamp"};
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var So=function(){function e(e,t){this.committed=e,this.snapshot=t}return e.prototype.toJSON=function(){return{committed:this.committed,snapshot:this.snapshot.toJSON()}},e}();function Io(e,t,n){var r;if(e=Object(o.n)(e),Mr("Reference.transaction",e._path),".length"===e.key||".keys"===e.key)throw"Reference.transaction failed: "+e.key+" is a read-only object.";var i=null===(r=null==n?void 0:n.applyLocally)||void 0===r||r,s=new o.a,a=Ui(e,(function(){}));return function(e,t,n,r,i,s){si(e,"transaction on "+t);var a={path:t,update:n,onComplete:r,status:null,order:v(),applyLocally:s,retryCount:0,unwatcher:i,abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},u=ui(e,t,void 0);a.currentInputSnapshot=u;var c=a.update(u.val());if(void 0===c)a.unwatcher(),a.currentOutputSnapshotRaw=null,a.currentOutputSnapshotResolved=null,a.onComplete&&a.onComplete(null,!1,a.currentInputSnapshot);else{Nr("transaction failed: Data returned ",c,a.path),a.status=0;var l=gr(e.transactionQueueTree_,t),h=br(l)||[];h.push(a),wr(l,h);var d=void 0;if("object"==typeof c&&null!==c&&Object(o.h)(c,".priority"))d=Object(o.z)(c,".priority"),Object(o.d)(Pr(d),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else d=(er(e.serverSyncTree_,t)||Ze.EMPTY_NODE).getPriority().val();var p=$r(e),f=tt(c,d),_=yr(f,u,p);a.currentOutputSnapshotRaw=f,a.currentOutputSnapshotResolved=_,a.currentWriteId=ei(e);var y=Gn(e.serverSyncTree_,t,_,a.currentWriteId,a.applyLocally);Hr(e.eventQueue_,t,y),ci(e,e.transactionQueueTree_)}}(e._repo,e._path,t,(function(t,n,r){var i=null;t?s.reject(t):(i=new Ii(r,new Si(e._repo,e._path),Qe),s.resolve(new So(n,i)))}),a,i),s.promise}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var ko=function(){function e(e){this._delegate=e}return e.prototype.cancel=function(e){Object(o.D)("OnDisconnect.cancel",0,1,arguments.length),Object(o.E)("OnDisconnect.cancel","onComplete",e,!0);var t=this._delegate.cancel();return e&&t.then((function(){return e(null)}),(function(t){return e(t)})),t},e.prototype.remove=function(e){Object(o.D)("OnDisconnect.remove",0,1,arguments.length),Object(o.E)("OnDisconnect.remove","onComplete",e,!0);var t=this._delegate.remove();return e&&t.then((function(){return e(null)}),(function(t){return e(t)})),t},e.prototype.set=function(e,t){Object(o.D)("OnDisconnect.set",1,2,arguments.length),Object(o.E)("OnDisconnect.set","onComplete",t,!0);var n=this._delegate.set(e);return t&&n.then((function(){return t(null)}),(function(e){return t(e)})),n},e.prototype.setWithPriority=function(e,t,n){Object(o.D)("OnDisconnect.setWithPriority",2,3,arguments.length),Object(o.E)("OnDisconnect.setWithPriority","onComplete",n,!0);var r=this._delegate.setWithPriority(e,t);return n&&r.then((function(){return n(null)}),(function(e){return n(e)})),r},e.prototype.update=function(e,t){if(Object(o.D)("OnDisconnect.update",1,2,arguments.length),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,I("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}Object(o.E)("OnDisconnect.update","onComplete",t,!0);var i=this._delegate.update(e);return t&&i.then((function(){return t(null)}),(function(e){return t(e)})),i},e}(),xo=function(){function e(e,t){this.committed=e,this.snapshot=t}return e.prototype.toJSON=function(){return Object(o.D)("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},e}(),Po=function(){function e(e,t){this._database=e,this._delegate=t}return e.prototype.val=function(){return Object(o.D)("DataSnapshot.val",0,0,arguments.length),this._delegate.val()},e.prototype.exportVal=function(){return Object(o.D)("DataSnapshot.exportVal",0,0,arguments.length),this._delegate.exportVal()},e.prototype.toJSON=function(){return Object(o.D)("DataSnapshot.toJSON",0,1,arguments.length),this._delegate.toJSON()},e.prototype.exists=function(){return Object(o.D)("DataSnapshot.exists",0,0,arguments.length),this._delegate.exists()},e.prototype.child=function(t){return Object(o.D)("DataSnapshot.child",0,1,arguments.length),t=String(t),Fr("DataSnapshot.child","path",t,!1),new e(this._database,this._delegate.child(t))},e.prototype.hasChild=function(e){return Object(o.D)("DataSnapshot.hasChild",1,1,arguments.length),Fr("DataSnapshot.hasChild","path",e,!1),this._delegate.hasChild(e)},e.prototype.getPriority=function(){return Object(o.D)("DataSnapshot.getPriority",0,0,arguments.length),this._delegate.priority},e.prototype.forEach=function(t){var n=this;return Object(o.D)("DataSnapshot.forEach",1,1,arguments.length),Object(o.E)("DataSnapshot.forEach","action",t,!1),this._delegate.forEach((function(r){return t(new e(n._database,r))}))},e.prototype.hasChildren=function(){return Object(o.D)("DataSnapshot.hasChildren",0,0,arguments.length),this._delegate.hasChildren()},Object.defineProperty(e.prototype,"key",{get:function(){return this._delegate.key},enumerable:!1,configurable:!0}),e.prototype.numChildren=function(){return Object(o.D)("DataSnapshot.numChildren",0,0,arguments.length),this._delegate.size},e.prototype.getRef=function(){return Object(o.D)("DataSnapshot.ref",0,0,arguments.length),new No(this._database,this._delegate.ref)},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!1,configurable:!0}),e}(),jo=function(){function e(e,t){this.database=e,this._delegate=t}return e.prototype.on=function(t,n,r,i){var s,a=this;Object(o.D)("Query.on",2,4,arguments.length),Object(o.E)("Query.on","callback",n,!1);var u=e.getCancelAndContextArgs_("Query.on",r,i),c=function(e,t){n.call(u.context,new Po(a.database,e),t)};c.userCallback=n,c.context=u.context;var l=null===(s=u.cancel)||void 0===s?void 0:s.bind(u.context);switch(t){case"value":return Ui(this._delegate,c,l),n;case"child_added":return Bi(this._delegate,c,l),n;case"child_removed":return Vi(this._delegate,c,l),n;case"child_changed":return zi(this._delegate,c,l),n;case"child_moved":return Hi(this._delegate,c,l),n;default:throw new Error(Object(o.m)("Query.on","eventType")+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},e.prototype.off=function(e,t,n){if(Object(o.D)("Query.off",0,3,arguments.length),Ar("Query.off",e,!0),Object(o.E)("Query.off","callback",t,!0),Object(o.F)("Query.off","context",n,!0),t){var r=function(){};r.userCallback=t,r.context=n,Yi(this._delegate,e,r)}else Yi(this._delegate,e)},e.prototype.get=function(){var e=this;return Fi(this._delegate).then((function(t){return new Po(e.database,t)}))},e.prototype.once=function(t,n,r,i){var s=this;Object(o.D)("Query.once",1,4,arguments.length),Object(o.E)("Query.once","callback",n,!0);var a=e.getCancelAndContextArgs_("Query.once",r,i),u=new o.a,c=function(e,t){var r=new Po(s.database,e);n&&n.call(a.context,r,t),u.resolve(r)};c.userCallback=n,c.context=a.context;var l=function(e){a.cancel&&a.cancel.call(a.context,e),u.reject(e)};switch(t){case"value":Ui(this._delegate,c,l,{onlyOnce:!0});break;case"child_added":Bi(this._delegate,c,l,{onlyOnce:!0});break;case"child_removed":Vi(this._delegate,c,l,{onlyOnce:!0});break;case"child_changed":zi(this._delegate,c,l,{onlyOnce:!0});break;case"child_moved":Hi(this._delegate,c,l,{onlyOnce:!0});break;default:throw new Error(Object(o.m)("Query.once","eventType")+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}return u.promise},e.prototype.limitToFirst=function(t){return Object(o.D)("Query.limitToFirst",1,1,arguments.length),new e(this.database,vo(this._delegate,ro(t)))},e.prototype.limitToLast=function(t){return Object(o.D)("Query.limitToLast",1,1,arguments.length),new e(this.database,vo(this._delegate,oo(t)))},e.prototype.orderByChild=function(t){return Object(o.D)("Query.orderByChild",1,1,arguments.length),new e(this.database,vo(this._delegate,ao(t)))},e.prototype.orderByKey=function(){return Object(o.D)("Query.orderByKey",0,0,arguments.length),new e(this.database,vo(this._delegate,co()))},e.prototype.orderByPriority=function(){return Object(o.D)("Query.orderByPriority",0,0,arguments.length),new e(this.database,vo(this._delegate,ho()))},e.prototype.orderByValue=function(){return Object(o.D)("Query.orderByValue",0,0,arguments.length),new e(this.database,vo(this._delegate,fo()))},e.prototype.startAt=function(t,n){return void 0===t&&(t=null),Object(o.D)("Query.startAt",0,2,arguments.length),new e(this.database,vo(this._delegate,Zi(t,n)))},e.prototype.startAfter=function(t,n){return void 0===t&&(t=null),Object(o.D)("Query.startAfter",0,2,arguments.length),new e(this.database,vo(this._delegate,to(t,n)))},e.prototype.endAt=function(t,n){return void 0===t&&(t=null),Object(o.D)("Query.endAt",0,2,arguments.length),new e(this.database,vo(this._delegate,Ki(t,n)))},e.prototype.endBefore=function(t,n){return void 0===t&&(t=null),Object(o.D)("Query.endBefore",0,2,arguments.length),new e(this.database,vo(this._delegate,Xi(t,n)))},e.prototype.equalTo=function(t,n){return Object(o.D)("Query.equalTo",1,2,arguments.length),new e(this.database,vo(this._delegate,yo(t,n)))},e.prototype.toString=function(){return Object(o.D)("Query.toString",0,0,arguments.length),this._delegate.toString()},e.prototype.toJSON=function(){return Object(o.D)("Query.toJSON",0,1,arguments.length),this._delegate.toJSON()},e.prototype.isEqual=function(t){if(Object(o.D)("Query.isEqual",1,1,arguments.length),!(t instanceof e)){var n="Query.isEqual failed: First argument must be an instance of firebase.database.Query.";throw new Error(n)}return this._delegate.isEqual(t._delegate)},e.getCancelAndContextArgs_=function(e,t,n){var r={cancel:void 0,context:void 0};if(t&&n)r.cancel=t,Object(o.E)(e,"cancel",r.cancel,!0),r.context=n,Object(o.F)(e,"context",r.context,!0);else if(t)if("object"==typeof t&&null!==t)r.context=t;else{if("function"!=typeof t)throw new Error(Object(o.m)(e,"cancelOrContext")+" must either be a cancel callback or a context object.");r.cancel=t}return r},Object.defineProperty(e.prototype,"ref",{get:function(){return new No(this.database,new Si(this._delegate._repo,this._delegate._path))},enumerable:!1,configurable:!0}),e}(),No=function(e){function t(t,n){var r=e.call(this,t,new Ci(n._repo,n._path,new vt,!1))||this;return r.database=t,r._delegate=n,r}return Object(s.c)(t,e),t.prototype.getKey=function(){return Object(o.D)("Reference.key",0,0,arguments.length),this._delegate.key},t.prototype.child=function(e){return Object(o.D)("Reference.child",1,1,arguments.length),"number"==typeof e&&(e=String(e)),new t(this.database,Pi(this._delegate,e))},t.prototype.getParent=function(){Object(o.D)("Reference.parent",0,0,arguments.length);var e=this._delegate.parent;return e?new t(this.database,e):null},t.prototype.getRoot=function(){return Object(o.D)("Reference.root",0,0,arguments.length),new t(this.database,this._delegate.root)},t.prototype.set=function(e,t){Object(o.D)("Reference.set",1,2,arguments.length),Object(o.E)("Reference.set","onComplete",t,!0);var n=Ri(this._delegate,e);return t&&n.then((function(){return t(null)}),(function(e){return t(e)})),n},t.prototype.update=function(e,t){if(Object(o.D)("Reference.update",1,2,arguments.length),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,I("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}Mr("Reference.update",this._delegate._path),Object(o.E)("Reference.update","onComplete",t,!0);var i=Li(this._delegate,e);return t&&i.then((function(){return t(null)}),(function(e){return t(e)})),i},t.prototype.setWithPriority=function(e,t,n){Object(o.D)("Reference.setWithPriority",2,3,arguments.length),Object(o.E)("Reference.setWithPriority","onComplete",n,!0);var r=Ai(this._delegate,e,t);return n&&r.then((function(){return n(null)}),(function(e){return n(e)})),r},t.prototype.remove=function(e){Object(o.D)("Reference.remove",0,1,arguments.length),Object(o.E)("Reference.remove","onComplete",e,!0);var t=Ni(this._delegate);return e&&t.then((function(){return e(null)}),(function(t){return e(t)})),t},t.prototype.transaction=function(e,t,n){var r=this;Object(o.D)("Reference.transaction",1,3,arguments.length),Object(o.E)("Reference.transaction","transactionUpdate",e,!1),Object(o.E)("Reference.transaction","onComplete",t,!0),Wr("Reference.transaction","applyLocally",n,!0);var i=Io(this._delegate,e,{applyLocally:n}).then((function(e){return new xo(e.committed,new Po(r.database,e.snapshot))}));return t&&i.then((function(e){return t(null,e.committed,e.snapshot)}),(function(e){return t(e,!1,null)})),i},t.prototype.setPriority=function(e,t){Object(o.D)("Reference.setPriority",1,2,arguments.length),Object(o.E)("Reference.setPriority","onComplete",t,!0);var n=Di(this._delegate,e);return t&&n.then((function(){return t(null)}),(function(e){return t(e)})),n},t.prototype.push=function(e,n){var r=this;Object(o.D)("Reference.push",0,2,arguments.length),Object(o.E)("Reference.push","onComplete",n,!0);var i=ji(this._delegate,e),s=i.then((function(e){return new t(r.database,e)}));n&&s.then((function(){return n(null)}),(function(e){return n(e)}));var a=new t(this.database,i);return a.then=s.then.bind(s),a.catch=s.catch.bind(s,void 0),a},t.prototype.onDisconnect=function(){return Mr("Reference.onDisconnect",this._delegate._path),new ko(new wi(this._delegate._repo,this._delegate._path))},Object.defineProperty(t.prototype,"key",{get:function(){return this.getKey()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this.getParent()},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){return this.getRoot()},enumerable:!1,configurable:!0}),t}(jo),Ro=function(){function e(e,t){var n=this;this._delegate=e,this.app=t,this.INTERNAL={delete:function(){return n._delegate._delete()}}}return e.prototype.useEmulator=function(e,t,n){void 0===n&&(n={}),Co(this._delegate,e,t,n)},e.prototype.ref=function(e){if(Object(o.D)("database.ref",0,1,arguments.length),e instanceof No){var t=xi(this._delegate,e.toString());return new No(this,t)}t=ki(this._delegate,e);return new No(this,t)},e.prototype.refFromURL=function(e){var t="database.refFromURL";Object(o.D)(t,1,1,arguments.length);var n=xi(this._delegate,e);return new No(this,n)},e.prototype.goOffline=function(){return Object(o.D)("database.goOffline",0,0,arguments.length),Oo(this._delegate)},e.prototype.goOnline=function(){return Object(o.D)("database.goOnline",0,0,arguments.length),Eo(this._delegate)},e.ServerValue={TIMESTAMP:To,increment:function(e){return function(e){return{".sv":{increment:e}}}(e)}},e}();
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Do=Object.freeze({__proto__:null,forceLongPolling:function(){ne.forceDisallow(),Z.forceAllow()},forceWebSockets:function(){Z.forceDisallow()},isWebSocketsAvailable:function(){return ne.isAvailable()},setSecurityDebugCallback:function(e,t){e._delegate._repo.persistentConnection_.securityDebugCallback_=t},stats:function(e,t){!function(e,t){if(void 0===t&&(t=!1),"undefined"!=typeof console){var n;t?(e.statsListener_||(e.statsListener_=new xt(e.stats_)),n=e.statsListener_.get()):n=e.stats_.get();var r=Object.keys(n).reduce((function(e,t){return Math.max(t.length,e)}),0);L(n,(function(e,t){for(var n=e,i=e.length;i<r+2;i++)n+=" ";console.log(n+t)}))}}(e._delegate._repo,t)},statsIncrementCounter:function(e,t){!function(e,t){var n,r;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */e.stats_.incrementCounter(t),n=e.statsReporter_,r=t,n.statsToReport_[r]=!0}(e._delegate._repo,t)},dataUpdateCount:function(e){return e._delegate._repo.dataUpdateCount},interceptServerData:function(e,t){return function(e,t){e.interceptServerDataCallback_=t}(e._delegate._repo,t)},initStandalone:function(e){var t=e.app,n=e.url,r=e.version,o=e.customAuthImpl,s=e.namespace,a=e.nodeAdmin,u=void 0!==a&&a;c(r);var l=new i.c("auth-internal",new i.b("database-standalone"));return l.setComponent(new i.a("auth-internal",(function(){return o}),"PRIVATE")),{instance:new Ro(bo(t,l,void 0,n,u),t),namespace:s}}}),Ao=ke;
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ke.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},ke.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)};var Lo=ie,Fo=Y,Mo=Object.freeze({__proto__:null,DataConnection:Ao,RealTimeConnection:Lo,hijackHash:function(e){var t=ke.prototype.put;return ke.prototype.put=function(n,r,i,o){void 0!==o&&(o=e()),t.call(this,n,r,i,o)},function(){ke.prototype.put=t}},ConnectionTarget:Fo,queryIdentifier:function(e){return e._delegate._queryIdentifier},forceRestClient:function(e){!function(e){go=e}(e)}}),qo=Ro.ServerValue;!function(e){c(e.SDK_VERSION);var n=e.INTERNAL.registerComponent(new i.a("database",(function(e,t){var n=t.instanceIdentifier,r=e.getProvider("app").getImmediate(),i=e.getProvider("auth-internal"),o=e.getProvider("app-check-internal");return new Ro(bo(r,i,o,n),r)}),"PUBLIC").setServiceProps({Reference:No,Query:jo,Database:Ro,DataSnapshot:Po,enableLogging:C,INTERNAL:Do,ServerValue:qo,TEST_ACCESS:Mo}).setMultipleInstances(!0));e.registerVersion("@firebase/database","0.10.1"),Object(o.t)()&&(t.exports=n)}(r.a)}).call(this,n(8),n(9)(e))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,c=[],l=!1,h=-1;function d(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!l){var e=a(d);l=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function _(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||l||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=_,i.addListener=_,i.once=_,i.off=_,i.removeListener=_,i.removeAllListeners=_,i.emit=_,i.prependListener=_,i.prependOnceListener=_,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";n.r(t);let r,i,o=0,s=0;function a(){return s}function u(){const e=dt();let t=document.body,n=document.documentElement,r=Math.max(t.scrollHeight,t.offsetHeight,n.clientHeight,n.scrollHeight,n.offsetHeight),i=Math.max(t.scrollWidth,t.offsetWidth,n.clientWidth,n.scrollWidth,n.offsetWidth)-500,a=i>r?r:i;o=225,e.width=a,e.height=a,document.getElementById("pageLayout").style.gridTemplateColumns=`20% ${a}px auto`,s=a/(c()+8),pt().imageSmoothingEnabled=!1}function c(){return 18}function l(){return r}var h=n(4);
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
h.a.registerVersion("firebase","8.6.2","app");n(7);let d=document.getElementById("live"),p=document.getElementById("score"),f=document.getElementById("scoreboard"),_=document.getElementById("saveUser");h.a.initializeApp({apiKey:"AIzaSyBZ53WGjhr1SnVr_86NkPD8krwnHlC2PVY",authDomain:"jkioins-invader.firebaseapp.com",projectId:"jkioins-invader",storageBucket:"jkioins-invader.appspot.com",messagingSenderId:"811260413997",appId:"1:811260413997:web:4b0c3be03da20b4e2410a4",databaseURL:"https://jkioins-invader-default-rtdb.europe-west1.firebasedatabase.app"}),_.addEventListener("click",()=>(E(),void h.a.database().ref("userScores").push().set({username:w(),score:y,life:d.value}).then((function(e){b()}),(function(e){console.log("error"+e)}))));let y=0,v=10;function m(){y++,v===y&&(console.log("reward"),v+=v,ot().forEach(e=>{e.addLife()})),p.value=y.toString()}function g(){y=0,p.value=y.toString()}function b(){let e=[];h.a.database().ref("userScores").once("value").then(t=>{let n=t.val();for(const t in n)e.push(n[t]);e.sort((e,t)=>t.score-e.score),function(e){var t;const n=document.createElement("table");for(let r=0;r<e.length;r++){let i=n.insertRow(-1),o=document.createTextNode(r+1+"."),s=document.createTextNode(e[r].username),a=document.createTextNode(e[r].score.toString()),u=document.createTextNode(null!=e[r].life?null===(t=e[r].life)||void 0===t?void 0:t.toString():"");i.insertCell(0).appendChild(o),i.insertCell(1).appendChild(s),i.insertCell(2).appendChild(a),i.insertCell(3).appendChild(u)}f.innerHTML=n.innerHTML}(e)})}function w(){return document.getElementById("username").value}let C,O=document.getElementById("enterUsername");function E(){O.style.display="none"}let T=new Audio;C=T.canPlayType("audio/mp3")?".mp3":".wav";const S=new Audio("assets/sounds/title_theme"+C);S.loop=!0,S.volume=.05;const I=new Audio("assets/sounds/game_over"+C);I.volume=.05;const k=new Audio("assets/sounds/laser"+C);function x(){let e=new Audio("assets/sounds/hit"+C);e.volume=.015,e.play()}var P;k.volume=.015,function(e){e.player="player",e.enemy="enemy"}(P||(P={}));class j{constructor(e){this._context=pt(),this._x=0,this._y=0,this._velocity=10,this._length=10,this._thickness=5,this._w=e,e===P.enemy&&(this._x=this._context.canvas.width,this._y=this._context.canvas.height)}shoot(e,t){(this._y<=0||this._y>this._context.canvas.height)&&(k.play(),this._clear(),this._x=e,this._y=t)}animateShot(){(this._y<=0||this._y>this._context.canvas.height)&&this._clear(),this._clear(),this._w===P.enemy&&(this._y+=this._velocity),this._w===P.player&&(this._y-=this._velocity),this._render()}hit(){this._clear(),this._y=this._w===P.player?0:this._context.canvas.height+1}_clear(){this._context.clearRect(this._x-(this._thickness+1)/2,this._y-this._length-1,this._thickness+1,this._length+5)}_render(){this._context.fillStyle="red",this._context.fillRect(this._x-this._thickness/2,this._y-this._length,this._thickness,this._length)}get getX(){return this._x}get getY(){let e=this._y;return this._w===P.enemy&&(e+=this._length),e}}let N,R=!0;function D(){setTimeout(()=>{ot().forEach(e=>{e.handleInput(),e.handleGamepadInput()}),st().forEach(e=>{e.animateShot()}),ct().updateEnemyCorp(),R&&(N=requestAnimationFrame(D))},1/60)}function A(e){R=e}function L(){return N}const F=document.getElementById("start"),M=document.getElementById("reset"),q=document.getElementById("stop"),W=document.getElementById("playerGuide");window.onunload=function(){alert("unload event detected!"),F.removeEventListener("click",V),q.removeEventListener("click",Y),M.removeEventListener("click",Q),setTimeout((function(){console.log("after")}),500)};let U=!1,B=!1;const z=new Image;function H(){q.disabled=!0,B=!0,A(!1),cancelAnimationFrame(L()),function(){const e=16*a(),t=dt().width/2-e/2,n=16*a()/2,r=dt().height/2-n/2;pt().fillStyle="rgb(50, 0, 25)",pt().fillRect(t-16,r-16,e+32,n+32),pt().drawImage(z,t,r,e,n)}(),S.pause(),S.currentTime=0,I.play(),b(),O.style.display="flex"}function V(){U||(W.src="assets/img/player-guide.png",S.play(),E(),U=!0,A(!0),g(),D(),F.innerHTML="start",F.disabled=!0,q.disabled=!1,M.disabled=!1)}function Y(){cancelAnimationFrame(L()),A(!1),U=!1,F.innerHTML="continue",F.disabled=!1,q.disabled=!0}function Q(){W.src="assets/img/player-guide.gif",I.pause(),I.currentTime=0,E(),g(),pt().clearRect(0,0,dt().width,dt().height),ut(),ct().updateEnemyCorp(),A(!1),U=!1,B=!1,ot().forEach(e=>{e.resetLife()}),F.innerHTML="start",F.disabled=!1,q.disabled=!0,M.disabled=!0}z.src="assets/img/game_over.png";class G extends class{constructor(e,t){this._speed=i,this._shoots=st(),this._sheet=new Image,this.isGameOver=!1,this._enemyColumn=e,this._y=t,this._shot=new j(P.enemy),at(this._shot),this._sheet.src="assets/img/ji-sheet.png"}renderEnemy(){this._renderImg(),this._shoot(),this.isGameOver&&this._gameOver()}moveDown(){this._enemyColumn.getCorp.getDown&&(this._y+=this._speed,this.isGameOver=!0)}clear(e){pt().clearRect(e-2,this._y-1,a()+4,a()+2)}hit(){for(let e=0;e<this._shoots.length;e++){let t=this._shoots[e].getX,n=this._shoots[e].getY;n>this._y&&n<=this._y+a()&&t>=this._enemyColumn.getX&&t<=this._enemyColumn.getX+a()&&(this._shoots[e].hit(),this._live--,x(),this._dead(),m())}}_dead(){this._live<=0&&(this._enemyColumn.removeEnemy(this),function(){let e=new Audio("assets/sounds/enemy_dead"+C);e.volume=.015,e.play()}())}_renderDummy(){pt().fillStyle="white",pt().fillRect(this._enemyColumn.getX,this._y,a(),a()),pt().clearRect(this._enemyColumn.getX+1,this._y+1,a()-2,a()-2)}_gameOver(){this._y+a()>pt().canvas.height-a()&&H()}_shoot(){1e4*Math.random()>9991&&0===this._enemyColumn.getEnemyIndex(this)&&this._fireShot()}_fireShot(){this._shot.shoot(this._enemyColumn.getX+a()/2,this._y+a()+20)}set setIsGameOver(e){this.isGameOver=e}get getIsGameOver(){return this.isGameOver}}{constructor(){super(...arguments),this._live=1,this._tileFrameX=0,this._tileFrameY=2,this.animationCounter=0}_renderImg(){this._changeTileFrame(),pt().drawImage(this._sheet,9*this._tileFrameX,9*this._tileFrameY,9,9,this._enemyColumn.getX,this._y,a(),a())}_changeTileFrame(){this.animationCounter>=100&&(this.animationCounter=0,this._tileFrameX=this._tileFrameX<1?1:0),this.animationCounter++}}class K{constructor(e,t,n){this._speed=2,this._enemyColumn=new Array,this._enemyCorp=e,this._x=n;for(let e=t=Math.abs(t);e>0;e--)this._enemyColumn.push(new G(this,e*(a()+l())))}move(){var e,t,n,r,i;this._enemyCorp.getRight?this._speed=Math.abs(this._speed):this._speed=-1*Math.abs(this._speed),this._x+=this._speed;for(let o=0;o<this._enemyColumn.length;o++)null===(e=this._enemyColumn[o])||void 0===e||e.clear(this._x-1.5*this._speed),null===(t=this._enemyColumn[o])||void 0===t||t.hit(),null===(r=null===(n=this._enemyColumn[o])||void 0===n?void 0:n.moveDown)||void 0===r||r.call(n),null===(i=this._enemyColumn[o])||void 0===i||i.renderEnemy()}addEnemy(){this._enemyColumn.push(new G(this,0))}get getCorp(){return this._enemyCorp}get getX(){return this._x}removeEnemy(e){this._enemyColumn=this._enemyColumn.filter(t=>t!==e)}getEnemyIndex(e){return this._enemyColumn.indexOf(e)}}class ${constructor(e,t){this._enemyCorp=new Array,this._right=!0,this._down=!1,this._newLine=12;for(let n=0;n<e;n++)this._enemyCorp.push(new K(this,t,n*(a()+l())))}updateEnemyCorp(){this._renderCorp(),0===this._enemyCorp.length&&H(),y>=this._newLine&&(this._newLine+=12,this._enemyCorp.forEach(e=>{e.addEnemy()}))}_renderCorp(){let e=!1,t=!1;for(let n=0;n<this._enemyCorp.length;n++)this._enemyCorp[n].move(),this._enemyCorp[n].getX+a()>=dt().width&&(this._right=!1,t=!0),this._enemyCorp[n].getX<=0&&(e=!0,t=!0);e&&(this._right=!0),this._down&&(this._down=!1),this._down=t}get getRight(){return this._right}get getDown(){return this._down}}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var X=function(e,t){return(X=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)};function J(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}X(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function Z(e,t,n,r){return new(n||(n=Promise))((function(i,o){function s(e){try{u(r.next(e))}catch(e){o(e)}}function a(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function ee(e,t){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}Object.create;function te(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function ne(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function re(e,t){for(var n=0,r=t.length,i=e.length;n<r;n++,i++)e[i]=t[n];return e}function ie(e){return this instanceof ie?(this.v=e,this):new ie(e)}function oe(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=i[e](t)).value instanceof ie?Promise.resolve(n.value.v).then(u,c):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function u(e){a("next",e)}function c(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}function se(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=te(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}Object.create;function ae(e){return"function"==typeof e}var ue,ce=((ue=function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}((function(e){Error.call(e),e.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),ue.prototype.constructor=ue,ue);function le(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var he=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var s=te(o),a=s.next();!a.done;a=s.next()){a.value.remove(this)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else o.remove(this);var u=this.initialTeardown;if(ae(u))try{u()}catch(e){i=e instanceof ce?e.errors:[e]}var c=this._teardowns;if(c){this._teardowns=null;try{for(var l=te(c),h=l.next();!h.done;h=l.next()){var d=h.value;try{pe(d)}catch(e){i=null!=i?i:[],e instanceof ce?i=re(re([],ne(i)),ne(e.errors)):i.push(e)}}}catch(e){n={error:e}}finally{try{h&&!h.done&&(r=l.return)&&r.call(l)}finally{if(n)throw n.error}}}if(i)throw new ce(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)pe(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&le(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&le(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();he.EMPTY;function de(e){return e instanceof he||e&&"closed"in e&&ae(e.remove)&&ae(e.add)&&ae(e.unsubscribe)}function pe(e){ae(e)?e():e.unsubscribe()}var fe={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},_e={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=_e.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,re([],ne(e)))},clearTimeout:function(e){var t=_e.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function ye(e){_e.setTimeout((function(){var t=fe.onUnhandledError;if(!t)throw e;t(e)}))}function ve(){}var me=ge("C",void 0,void 0);function ge(e,t,n){return{kind:e,value:t,error:n}}var be=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,de(t)&&t.add(n)):n.destination=Te,n}return J(t,e),t.create=function(e,t,n){return new we(e,t,n)},t.prototype.next=function(e){this.isStopped?Ee(function(e){return ge("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?Ee(ge("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?Ee(me,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(he),we=function(e){function t(t,n,r){var i,o=e.call(this)||this;if(ae(t))i=t;else if(t){var s;i=t.next,n=t.error,r=t.complete,o&&fe.useDeprecatedNextContext?(s=Object.create(t)).unsubscribe=function(){return o.unsubscribe()}:s=t,i=null==i?void 0:i.bind(s),n=null==n?void 0:n.bind(s),r=null==r?void 0:r.bind(s)}return o.destination={next:i?Ce(i,o):ve,error:Ce(null!=n?n:Oe,o),complete:r?Ce(r,o):ve},o}return J(t,e),t}(be);function Ce(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{e.apply(void 0,re([],ne(n)))}catch(e){if(fe.useDeprecatedSynchronousErrorHandling){if(!t._syncErrorHack_isSubscribing)throw e;t.__syncError=e}else ye(e)}}}function Oe(e){throw e}function Ee(e,t){var n=fe.onStoppedNotification;n&&_e.setTimeout((function(){return n(e,t)}))}var Te={closed:!0,next:ve,error:Oe,complete:ve},Se="function"==typeof Symbol&&Symbol.observable||"@@observable";function Ie(e){return e}function ke(e){return 0===e.length?Ie:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var xe=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=(r=e)&&r instanceof be||function(e){return e&&ae(e.next)&&ae(e.error)&&ae(e.complete)}(r)&&de(r)?e:new we(e,t,n);if(fe.useDeprecatedSynchronousErrorHandling)this._deprecatedSyncErrorSubscribe(i);else{var o=this.operator,s=this.source;i.add(o?o.call(i,s):s?this._subscribe(i):this._trySubscribe(i))}return i},e.prototype._deprecatedSyncErrorSubscribe=function(e){var t=e;t._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)e.add(n.call(e,this.source));else try{e.add(this._subscribe(e))}catch(e){t.__syncError=e}for(var r=t;r;){if("__syncError"in r)try{throw r.__syncError}finally{e.unsubscribe()}r=r.destination}t._syncErrorHack_isSubscribing=!1},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=Pe(t))((function(t,r){var i;i=n.subscribe((function(t){try{e(t)}catch(e){r(e),null==i||i.unsubscribe()}}),r,t)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[Se]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?ke(e)(this):this},e.prototype.toPromise=function(e){var t=this;return new(e=Pe(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function Pe(e){var t;return null!==(t=null!=e?e:fe.Promise)&&void 0!==t?t:Promise}function je(e){return function(t){if(function(e){return ae(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var Ne=function(e){function t(t,n,r,i,o){var s=e.call(this,t)||this;return s.onFinalize=o,s._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,s._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,s._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,s}return J(t,e),t.prototype.unsubscribe=function(){var t,n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))},t}(be);function Re(e,t){return je((function(n,r){var i=0;n.subscribe(new Ne(r,(function(n){r.next(e.call(t,n,i++))})))}))}var De=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Ae(e){return ae(null==e?void 0:e.then)}function Le(e,t){return new xe((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}var Fe="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Me(e){return ae(e[Se])}function qe(e){return ae(null==e?void 0:e[Fe])}function We(e){return Symbol.asyncIterator&&ae(null==e?void 0:e[Symbol.asyncIterator])}function Ue(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function Be(e){return oe(this,arguments,(function(){var t,n,r;return ee(this,(function(i){switch(i.label){case 0:t=e.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,ie(t.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,ie(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,ie(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function ze(e){return ae(null==e?void 0:e.getReader)}function He(e){if(e instanceof xe)return e;if(null!=e){if(Me(e))return r=e,new xe((function(e){var t=r[Se]();if(ae(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(De(e))return Ve(e);if(Ae(e))return n=e,new xe((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,ye)}));if(We(e))return Ye(e);if(qe(e))return t=e,new xe((function(e){var n,r;try{for(var i=te(t),o=i.next();!o.done;o=i.next()){var s=o.value;if(e.next(s),e.closed)return}}catch(e){n={error:e}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}e.complete()}));if(ze(e))return Ye(Be(e))}var t,n,r;throw Ue(e)}function Ve(e){return new xe((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function Ye(e){return new xe((function(t){(function(e,t){var n,r,i,o;return Z(this,void 0,void 0,(function(){var s,a;return ee(this,(function(u){switch(u.label){case 0:u.trys.push([0,5,6,11]),n=se(e),u.label=1;case 1:return[4,n.next()];case 2:if((r=u.sent()).done)return[3,4];if(s=r.value,t.next(s),t.closed)return[2];u.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=u.sent(),i={error:a},[3,11];case 6:return u.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function Qe(e,t,n){return void 0===n&&(n=1/0),ae(t)?Qe((function(n,r){return Re((function(e,i){return t(n,e,r,i)}))(He(e(n,r)))}),n):("number"==typeof t&&(n=t),je((function(t,r){return function(e,t,n,r,i,o,s,a){var u=[],c=0,l=0,h=!1,d=function(){!h||u.length||c||t.complete()},p=function(e){return c<r?f(e):u.push(e)},f=function(e){o&&t.next(e),c++;var a=!1;He(n(e,l++)).subscribe(new Ne(t,(function(e){null==i||i(e),o?p(e):t.next(e)}),(function(){a=!0}),void 0,(function(){if(a)try{c--;for(var e=function(){var e=u.shift();s?t.add(s.schedule((function(){return f(e)}))):f(e)};u.length&&c<r;)e();d()}catch(e){t.error(e)}})))};return e.subscribe(new Ne(t,p,(function(){h=!0,d()}))),function(){null==a||a()}}(t,r,e,n)})))}var Ge=Array.isArray;function Ke(e){return Re((function(t){return function(e,t){return Ge(t)?e.apply(void 0,re([],ne(t))):e(t)}(e,t)}))}var $e=["addListener","removeListener"],Xe=["addEventListener","removeEventListener"],Je=["on","off"];function Ze(e,t,n,r){if(ae(n)&&(r=n,n=void 0),r)return Ze(e,t,n).pipe(Ke(r));var i,o,s=ne(function(e){return ae(e.addEventListener)&&ae(e.removeEventListener)}(e)?Xe.map((function(r){return function(i){return e[r](t,i,n)}})):function(e){return ae(e.addListener)&&ae(e.removeListener)}(e)?$e.map(et(e,t)):function(e){return ae(e.on)&&ae(e.off)}(e)?Je.map(et(e,t)):[],2),a=s[0],u=s[1];if(!a&&De(e))return Qe((function(e){return Ze(e,t,n)}))((i=e,o?Le(i,o):Ve(i)));if(!a)throw new TypeError("Invalid event target");return new xe((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return a(t),function(){return u(t)}}))}function et(e,t){return function(n){return function(r){return e[n](t,r)}}}class tt{constructor(e,t,n){this._sheet=new Image,this._life=3,this._shots=st(),this._x=dt().height-(dt().width-a())/2,this._y=dt().height-a(),this._velocity=4,this.lifeOutElement=document.getElementById("live"),this.pressed_keys=[],this._keydown=Ze(document,"keydown"),this._keydown$=this._keydown.pipe(Re(e=>{this.pressed_keys.push(e.key)})),this._keyup=Ze(document,"keyup"),this._keyup$=this._keyup.pipe(Re(e=>{this.pressed_keys=this.pressed_keys.filter(t=>t!==e.key)})),this.keydownSubscription=this._keydown$.subscribe(),this.keyupSubscription=this._keyup$.subscribe(),this._left=e,this._right=t,this._fire=n,this._shot=new j(P.player),at(this._shot),this._render(!0),this.lifeOutElement.value=this._life.toString()}handleInput(){this.pressed_keys.includes(this._left)&&this._moveLeft(),this.pressed_keys.includes(this._right)&&this._moveRight(),this.pressed_keys.includes(this._fire)&&this._fireShot(),this._clear(),this._render(!0),this._hit()}_moveLeft(){this._x=this._x-this._velocity>0?this._x-this._velocity:0}_moveRight(){this._x=this._x+a()<dt().width?this._x+this._velocity:dt().width-a()}_fireShot(){this._shot.shoot(this._x+a()/2,this._y)}_clear(){pt().clearRect(this._x-this._velocity,this._y,dt().width,dt().height)}_render(e){if(this._sheet.src="assets/img/ji-sheet.png",e){const e=this;this._sheet.onload=function(){pt().drawImage(e._sheet,0,0,9,9,e._x,e._y,a(),a())}}else pt().drawImage(this._sheet,0,0,9,9,this._x,this._y,a(),a())}_hit(){for(let e=0;e<this._shots.length;e++){let t=this._shots[e].getX,n=this._shots[e].getY;n>this._y&&n<=this._y+a()&&t>=this._x&&t<=this._x+a()&&(this._shots[e].hit(),this._life--,this.lifeOutElement.value=this._life.toString(),x(),this._dead(),console.log(this._life))}}_dead(){this._life<=0&&H()}addLife(){this._life++,this.lifeOutElement.value=this._life.toString()}resetLife(){this._life=3,this.lifeOutElement.value=this._life.toString()}handleGamepadInput(){const e=(navigator.getGamepads?navigator.getGamepads():[])[0];e&&(e.axes[0]<-.25||e.axes[2]<-.25||e.buttons[14].pressed?this._moveLeft():(e.axes[0]>.25||e.axes[2]>.25||e.buttons[15].pressed)&&this._moveRight(),(e.buttons[7].pressed||e.buttons[6].pressed||e.buttons[0].pressed)&&this._fireShot())}}let nt,rt=new Array,it=new Array;function ot(){return rt}function st(){return it}function at(e){it.push(e)}function ut(){nt=new $(18,4)}function ct(){return nt}const lt=document.getElementById("jkonsInvader"),ht=dt().getContext("2d");function dt(){return lt}function pt(){return ht}function ft(e){const t=e.target,n=t.scrollTop;t.querySelectorAll("thead th").forEach(e=>e.style.transform=`translateY(${n}px)`)}var _t,yt,vt;document.querySelectorAll(".tableFixHead").forEach(e=>e.addEventListener("scroll",ft)),u(),window.addEventListener("resize",()=>{u()}),i=2*a()/3,r=a()/6,_t="a",yt="d",vt=" ",rt.push(new tt(_t,yt,vt)),b(),document.addEventListener("keyup",e=>{B||function(e){switch(e.key){case" ":U||V();break;case"p":Y()}}(e)}),F.addEventListener("click",V),q.addEventListener("click",Y),M.addEventListener("click",Q),ut()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,