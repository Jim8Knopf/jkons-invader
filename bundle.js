!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([,function(t,e,n){"use strict";n.r(e),n.d(e,"init",(function(){return Ct})),n.d(e,"gameOver",(function(){return It})),n.d(e,"score",(function(){return jt})),n.d(e,"stop",(function(){return Pt}));class r{constructor(t,e,n,r,i,o){this._live=1,this._sheet=new Image,this._tileFrameX=0,this._tileFrameY=2,this._tileWidth=9,this._tileHeight=9,this._spriteChangeCounter=0,this.grid=900,this._context=t,this._x=i,this._y=o,this._speedX=5,this._speedY=35,this._zoom=r,this._zoomedWidth=this._tileWidth*this._zoom,this._zoomedHeight=this._tileHeight*this._zoom,this._shoots=e,this._handler=n,this._canvasCollision={right:this._context.canvas.width-this._zoomedWidth,left:0,top:0,bottom:this._context.canvas.height-2*this._zoomedHeight},this._sheet.src="../jkons-invader/img/ji-sheet.png"}_translate(t,e){this._context.clearRect(this._x,this._y,this._zoomedWidth,this._zoomedHeight),this._x+=t,this._y+=e,this._renderEnemy()}_renderEnemy(){this._context.drawImage(this._sheet,this._tileWidth*this._tileFrameX,this._tileWidth*this._tileFrameY,this._tileWidth,this._tileWidth,this._x,this._y,this._zoomedWidth,this._zoomedHeight)}moveEnemy(){this._hit(),this._spriteAnimation(),(this._speedX>0&&this._x<=this._canvasCollision.right||this._speedX<0&&this._x>=this._canvasCollision.left)&&this._translate(this._speedX,0),(this._speedX>0&&this._x>=this._canvasCollision.right||this._speedX<0&&this._x<=this._canvasCollision.left)&&(this._speedX=-this._speedX,this._translate(0,this._speedY)),this._dead(),this._gameOver()}_spriteAnimation(){this._spriteChangeCounter>=50?(this._spriteChangeCounter=0,this._tileFrameX<1?this._tileFrameX++:this._tileFrameX=0):this._spriteChangeCounter++}_hit(){for(let t=0;t<this._shoots.length;t++){let e=this._shoots[t].getX,n=this._shoots[t].getY;n>this._y&&n<=this._y+this._zoomedHeight&&e>=this._x&&e<=this._x+this._zoomedWidth&&(console.log("HIT"),this._shoots[t].hit(),this._live--,jt()),this._shoots[t].getX}}_dead(){if(this._live<=0){this._handler.removeEnemy(this),this._context.clearRect(this._x,this._y,this._zoomedWidth,this._zoomedHeight);const t=9*Math.floor(Math.random()*(this._context.canvas.width/9));let e=Math.floor(Math.random()*(this._canvasCollision.bottom/9)*9);for(;this._handler.getEnemiesY.find(t=>{e>=t&&this._zoomedHeight});)e=9*Math.floor(Math.random()*(this._context.canvas.height/9));setTimeout(()=>{this._handler.addEnemy(new r(this._context,this._shoots,this._handler,this._zoom,t,e))},1e4)}}_gameOver(){this._y>this._canvasCollision.bottom&&(console.log("finish"),Pt())}get zoom(){return this._zoom}get tileWidth(){return this._tileWidth}get tileHeight(){return this._tileHeight}get y(){return this._y}}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function o(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function s(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function u(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((r=r.apply(t,e||[])).next())}))}function u(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}}Object.create;function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function h(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function a(t,e){for(var n=0,r=e.length,i=t.length;n<r;n++,i++)t[i]=e[n];return t}function l(t){return this instanceof l?(this.v=t,this):new l(t)}function f(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||u(t,e)}))})}function u(t,e){try{(n=i[t](e)).value instanceof l?Promise.resolve(n.value.v).then(c,h):a(o[0][2],n)}catch(t){a(o[0][3],t)}var n}function c(t){u("next",t)}function h(t){u("throw",t)}function a(t,e){t(e),o.shift(),o.length&&u(o[0][0],o[0][1])}}function d(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=c(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){(function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)})(r,i,(e=t[n](e)).done,e.value)}))}}}Object.create;function p(t){return"function"==typeof t}function _(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var y=_((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function v(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var b=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var s=c(o),u=s.next();!u.done;u=s.next()){u.value.remove(this)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(e=s.return)&&e.call(s)}finally{if(t)throw t.error}}else o.remove(this);var l=this.initialTeardown;if(p(l))try{l()}catch(t){i=t instanceof y?t.errors:[t]}var f=this._teardowns;if(f){this._teardowns=null;try{for(var d=c(f),_=d.next();!_.done;_=d.next()){var v=_.value;try{w(v)}catch(t){i=null!=i?i:[],t instanceof y?i=a(a([],h(i)),h(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{_&&!_.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}}if(i)throw new y(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)w(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&v(e,t)},t.prototype.remove=function(e){var n=this._teardowns;n&&v(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),m=b.EMPTY;function g(t){return t instanceof b||t&&"closed"in t&&p(t.remove)&&p(t.add)&&p(t.unsubscribe)}function w(t){p(t)?t():t.unsubscribe()}var x={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},S={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=S.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,a([],h(t)))},clearTimeout:function(t){var e=S.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function z(t){S.setTimeout((function(){var e=x.onUnhandledError;if(!e)throw t;e(t)}))}function E(){}var k=C("C",void 0,void 0);function C(t,e,n){return{kind:t,value:e,error:n}}var I=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,g(e)&&e.add(n)):n.destination=A,n}return o(e,t),e.create=function(t,e,n){return new O(t,e,n)},e.prototype.next=function(t){this.isStopped?T(function(t){return C("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?T(C("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?T(k,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(b),O=function(t){function e(e,n,r){var i,o=t.call(this)||this;if(p(e))i=e;else if(e){var s;i=e.next,n=e.error,r=e.complete,o&&x.useDeprecatedNextContext?(s=Object.create(e)).unsubscribe=function(){return o.unsubscribe()}:s=e,i=null==i?void 0:i.bind(s),n=null==n?void 0:n.bind(s),r=null==r?void 0:r.bind(s)}return o.destination={next:i?j(i,o):E,error:j(null!=n?n:P,o),complete:r?j(r,o):E},o}return o(e,t),e}(I);function j(t,e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];try{t.apply(void 0,a([],h(n)))}catch(t){if(x.useDeprecatedSynchronousErrorHandling){if(!e._syncErrorHack_isSubscribing)throw t;e.__syncError=t}else z(t)}}}function P(t){throw t}function T(t,e){var n=x.onStoppedNotification;n&&S.setTimeout((function(){return n(t,e)}))}var A={closed:!0,next:E,error:P,complete:E},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function W(t){return t}function X(t){return 0===t.length?W:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var F=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=(r=t)&&r instanceof I||function(t){return t&&p(t.next)&&p(t.error)&&p(t.complete)}(r)&&g(r)?t:new O(t,e,n);if(x.useDeprecatedSynchronousErrorHandling)this._deprecatedSyncErrorSubscribe(i);else{var o=this.operator,s=this.source;i.add(o?o.call(i,s):s?this._subscribe(i):this._trySubscribe(i))}return i},t.prototype._deprecatedSyncErrorSubscribe=function(t){var e=t;e._syncErrorHack_isSubscribing=!0;var n=this.operator;if(n)t.add(n.call(t,this.source));else try{t.add(this._subscribe(t))}catch(t){e.__syncError=t}for(var r=e;r;){if("__syncError"in r)try{throw r.__syncError}finally{t.unsubscribe()}r=r.destination}e._syncErrorHack_isSubscribing=!1},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=L(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),null==i||i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[H]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?X(t)(this):this},t.prototype.toPromise=function(t){var e=this;return new(t=L(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function L(t){var e;return null!==(e=null!=t?t:x.Promise)&&void 0!==e?e:Promise}function M(t){return function(e){if(function(t){return p(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var Y=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.onFinalize=o,s._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,s._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return o(e,t),e.prototype.unsubscribe=function(){var e,n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(I);function R(t,e){return M((function(n,r){var i=0;n.subscribe(new Y(r,(function(n){r.next(t.call(e,n,i++))})))}))}var D=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function N(t){return p(null==t?void 0:t.then)}function U(t,e){return new F((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}var $="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function B(t){return p(t[H])}function G(t){return p(null==t?void 0:t[$])}function V(t){return Symbol.asyncIterator&&p(null==t?void 0:t[Symbol.asyncIterator])}function q(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}function J(t){return f(this,arguments,(function(){var e,n,r;return u(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,l(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,l(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,l(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function K(t){return p(null==t?void 0:t.getReader)}function Q(t){if(t instanceof F)return t;if(null!=t){if(B(t))return r=t,new F((function(t){var e=r[H]();if(p(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(D(t))return Z(t);if(N(t))return n=t,new F((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,z)}));if(V(t))return tt(t);if(G(t))return e=t,new F((function(t){var n,r;try{for(var i=c(e),o=i.next();!o.done;o=i.next()){var s=o.value;if(t.next(s),t.closed)return}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(K(t))return tt(J(t))}var e,n,r;throw q(t)}function Z(t){return new F((function(e){for(var n=0;n<t.length&&!e.closed;n++)e.next(t[n]);e.complete()}))}function tt(t){return new F((function(e){(function(t,e){var n,r,i,o;return s(this,void 0,void 0,(function(){var s,c;return u(this,(function(u){switch(u.label){case 0:u.trys.push([0,5,6,11]),n=d(t),u.label=1;case 1:return[4,n.next()];case 2:if((r=u.sent()).done)return[3,4];if(s=r.value,e.next(s),e.closed)return[2];u.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=u.sent(),i={error:c},[3,11];case 6:return u.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:u.sent(),u.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(t,e).catch((function(t){return e.error(t)}))}))}function et(t,e,n){return void 0===n&&(n=1/0),p(e)?et((function(n,r){return R((function(t,i){return e(n,t,r,i)}))(Q(t(n,r)))}),n):("number"==typeof e&&(n=e),M((function(e,r){return function(t,e,n,r,i,o,s,u){var c=[],h=0,a=0,l=!1,f=function(){!l||c.length||h||e.complete()},d=function(t){return h<r?p(t):c.push(t)},p=function(t){o&&e.next(t),h++;var u=!1;Q(n(t,a++)).subscribe(new Y(e,(function(t){null==i||i(t),o?d(t):e.next(t)}),(function(){u=!0}),void 0,(function(){if(u)try{h--;for(var t=function(){var t=c.shift();s?e.add(s.schedule((function(){return p(t)}))):p(t)};c.length&&h<r;)t();f()}catch(t){e.error(t)}})))};return t.subscribe(new Y(e,d,(function(){l=!0,f()}))),function(){null==u||u()}}(e,r,t,n)})))}var nt=Array.isArray;function rt(t){return R((function(e){return function(t,e){return nt(e)?t.apply(void 0,a([],h(e))):t(e)}(t,e)}))}var it=["addListener","removeListener"],ot=["addEventListener","removeEventListener"],st=["on","off"];function ut(t,e,n,r){if(p(n)&&(r=n,n=void 0),r)return ut(t,e,n).pipe(rt(r));var i,o,s=h(function(t){return p(t.addEventListener)&&p(t.removeEventListener)}(t)?ot.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return p(t.addListener)&&p(t.removeListener)}(t)?it.map(ct(t,e)):function(t){return p(t.on)&&p(t.off)}(t)?st.map(ct(t,e)):[],2),u=s[0],c=s[1];if(!u&&D(t))return et((function(t){return ut(t,e,n)}))((i=t,o?U(i,o):Z(i)));if(!u)throw new TypeError("Invalid event target");return new F((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return u(e),function(){return c(e)}}))}function ct(t,e){return function(n){return function(r){return t[n](e,r)}}}class ht{constructor(t,e,n,r,i,o){this._sheet=new Image,this._velocity=4,this.pressed_keys=[],this._keydown=ut(document,"keydown"),this._keydown$=this._keydown.pipe(R(t=>{this.pressed_keys.push(t.key)})),this._keyup=ut(document,"keyup"),this._keyup$=this._keyup.pipe(R(t=>{this.pressed_keys=this.pressed_keys.filter(e=>e!==t.key)})),this.keydownSubscription=this._keydown$.subscribe(),this.keyupSubscription=this._keyup$.subscribe(),this._tileSize=9,this._context=t,this._shot=e,this._left=n,this._right=r,this._fire=i,this._zoomedSize=o*this._tileSize,this._y=t.canvas.height-this._zoomedSize,this._x=(t.canvas.width-this._zoomedSize)/2,this._sheet.src="../jkons-invader/img/ji-sheet.png",this._render(!0)}handleInput(){this.pressed_keys.includes(this._left)&&this._moveLeft(),this.pressed_keys.includes(this._right)&&this._moveRight(),this.pressed_keys.includes(this._fire)&&this._fireShot(),this._clear(),this._render()}_moveLeft(){this._x=this._x-this._velocity>=0?this._x-this._velocity:0}_moveRight(){this._x=this._x+this._zoomedSize<=this._context.canvas.width?this._x+this._velocity:this._x}_fireShot(){this._shot.shoot(this._x+this._zoomedSize/2,this._y)}_clear(){this._context.clearRect(this._x-this._velocity,this._y,this._context.canvas.width,this._context.canvas.height)}_render(t){if(t){const t=this;this._sheet.onload=function(){t._context.drawImage(t._sheet,0,0,9,9,t._x,t._y,t._zoomedSize,t._zoomedSize)}}else this._context.drawImage(this._sheet,0,0,9,9,this._x,this._y,this._zoomedSize,this._zoomedSize)}}class at{constructor(t){this._velocity=20,this._length=10,this._thickness=5,this._context=t,this._x=0,this._y=0}shoot(t,e){this._y<=0&&(this._clear(),this._x=t,this._y=e)}hit(){this._clear(),this._y=0}shootAnimation(){this._y<=0&&this._clear(),this._clear(),this._y-=this._velocity,this._render()}_clear(){this._context.clearRect(this._x-this._thickness/2,this._y-this._length,this._thickness+.5,this._length+.1)}_render(){this._context.fillStyle="red",this._context.fillRect(this._x-this._thickness/2,this._y-this._length,this._thickness,this._length)}get getX(){return this._x}get getY(){return this._y}}var lt=_((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ft=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return o(e,t),e.prototype.lift=function(t){var e=new dt(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new lt},e.prototype.next=function(t){var e,n;if(this._throwIfClosed(),!this.isStopped){var r=this.observers.slice();try{for(var i=c(r),o=i.next();!o.done;o=i.next()){o.value.next(t)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}}},e.prototype.error=function(t){if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=t;for(var e=this.observers;e.length;)e.shift().error(t)}},e.prototype.complete=function(){if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;for(var t=this.observers;t.length;)t.shift().complete()}},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this.hasError,n=this.isStopped,r=this.observers;return e||n?m:(r.push(t),new b((function(){return v(r,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this.hasError,n=this.thrownError,r=this.isStopped;e?t.error(n):r&&t.complete()},e.prototype.asObservable=function(){var t=new F;return t.source=this,t},e.create=function(t,e){return new dt(t,e)},e}(F),dt=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return o(e,t),e.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},e.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:m},e}(ft);const pt=new(function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return o(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){var t=this.hasError,e=this.thrownError,n=this._value;if(t)throw e;return this._throwIfClosed(),n},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(ft))(23),_t=document.getElementById("jkonsInvader"),yt=_t.getContext("2d"),vt=new class{constructor(){this.enemies=[]}addEnemy(t){this.enemies.push(t)}addEnemies(t){this.enemies.concat(t)}removeEnemy(t){this.enemies.splice(this.enemies.indexOf(t),1)}moveEnemies(){for(let t=0;t<this.enemies.length;t++)this.enemies[t].moveEnemy()}get getEnemiesY(){const t=[];for(let e=0;e<this.enemies.length;e++)t.push(this.enemies[e].y);return t}},bt=new class{constructor(t){this._zoom=1,this.size=0,this._canvas=t,this.resizeCanvas(),window.addEventListener("resize",()=>{this.resizeCanvas()})}resizeCanvas(){innerHeight<=450?this.zoom=1:innerHeight<=690||innerWidth<=675?this.zoom=2:innerHeight<=915||innerWidth<=900?this.zoom=3:this.zoom=4,this.size=225*this.zoom,this._canvas.width=this.size,this._canvas.height=this.size}set zoom(t){this._zoom=t}get zoom(){return this._zoom}}(_t);yt.imageSmoothingEnabled=!1,pt.subscribe(console.log);let mt,gt=new Array,wt=new Array,xt=!1,St=(document.getElementById("score"),!0);const zt=function(t,e,n){const r=new at(yt),i=new ht(yt,r,t,e,n,bt.zoom);return gt.push(r),wt.push(i),i}("a","d"," "),Et=new r(yt,gt,vt,1,0,0),kt=bt.zoom*Et.tileWidth;function Ct(){document.addEventListener("keyup",t=>{switch(t.key){case"r":!1===xt?(xt=!0,Ot()):Ct();break;default:xt=!1}})}for(let t=0;t<20;t++)vt.addEnemy(new r(yt,gt,vt,bt.zoom,t*kt,0));function It(){}function Ot(){setTimeout(()=>{zt.handleInput(),vt.moveEnemies();for(let t=0;t<gt.length;t++)gt[t].shootAnimation();St&&(mt=requestAnimationFrame(Ot))},1/60)}function jt(){0}function Pt(){console.log("stop"),St=!1,cancelAnimationFrame(mt);let t=(_t.width-800)/2,e=_t.height/2;yt.font="160px Arial",yt.fillText("Game Over",t,e)}Ct()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,